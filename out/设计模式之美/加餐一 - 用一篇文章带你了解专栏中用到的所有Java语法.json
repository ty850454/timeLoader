{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":0,"audio_size":3136289,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/db\/a8\/db44bb20cf05b85887fd229d7b6f09a8.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/96\/26\/96777fe4f95a8fb8b88c90d7d8313926\/ld\/ld.m3u8","chapter_id":"1061","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":8},"neighbors":{"left":{"article_title":"100 | 如何将设计思想、原则、模式等理论知识应用到项目中？","id":251930},"right":{"article_title":"加餐二 | 设计模式、重构、编程规范等相关书籍推荐","id":172690}},"audio_time":"00:03:16","video_height":0,"rate_percent":0,"article_content":"<p>尽管说设计模式跟编程语言没有直接关系，但是，我们也无法完全脱离代码来讲设计模式。我本人熟悉的是Java语言，所以专栏中的代码示例我都是用Java语言来写的。考虑到有些同学并不熟悉Java语言，我今天用一篇文章介绍一下专栏中用到的Java语法。<\/p><p>如果你有一定的编程基础，熟悉一门编程语言，结合我今天讲的Java语法知识，那看懂专栏中的代码基本不成问题。<\/p><p>如果你熟悉的是C\/C++、C#、PHP，那几乎不用费多大力气，就能看懂Java代码。我当时从C++转到Java，也只看了一天的书，基本语法就全部掌握了。<\/p><p>如果你熟悉的是Python、Go、Ruby、JavaScript，这些语言的语法可能跟Java的区别稍微有些大，但是，通过这篇文章，做到能看懂也不是难事儿。<\/p><p>好了，现在，就让我们一块儿看下，专栏中用到的所有Java语言的语法。<\/p><h2>Hello World<\/h2><p>我们先来看一下，Java语言的Hello World代码如何编写。<\/p><p>在Java中，所有的代码都必须写在类里面，所以，我们定义一个HelloWorld类。main()函数是程序执行的入口。main()函数中调用了Java开发包JDK提供的打印函数System.out.println()来打印hello world字符串。除此之外，Java中有两种代码注释方式，第一种是“\/\/注释…”双斜杠，表示后面的字符串都是注释，第二种是“\/*注释…*\/”，表示中间的内容都是注释。<\/p><!-- [[[read_end]]] --><pre><code>\/*hello world程序*\/\npublic class HelloWorld {\n    public static void main(String []args) {\n        System.out.println(&quot;Hello World&quot;); \/\/打印Hello World\n    }\n}\n<\/code><\/pre><h2>基本数据类型<\/h2><p>Java语言中的基本数据类型跟其他语言类似，主要有下面几种：<\/p><ul>\n<li>整型类型：byte（字节）、short（短整型）、int（整型）、long（长整型）<\/li>\n<li>浮点类型：float（单精度浮点）、double（双精度浮点）<\/li>\n<li>字符型：char<\/li>\n<li>布尔型：boolean<\/li>\n<\/ul><p>如下，我们来定义一个基本类型变量：<\/p><pre><code>int a = 6;\n<\/code><\/pre><p>除此之外，为了方便我们使用，Java还提供了一些封装这些基本数据类型的类，这些类实现了一些常用的功能函数，可以直接拿来使用。常用的有下面几个类：<\/p><ul>\n<li>Integer：对应封装了基本类型int；<\/li>\n<li>Long：对应封装了基本类型long；<\/li>\n<li>Float：对应封装了基本类型float；<\/li>\n<li>Double：对应封装了基本类型double；<\/li>\n<li>Boolean：对应封装了基本类型boolean；<\/li>\n<li>String：对应封装了字符串类型char[]。<\/li>\n<\/ul><p>如下，我们来定义一个Integer对象：<\/p><pre><code>Integer oa = new Integer(6);\n<\/code><\/pre><h2>数组<\/h2><p>Java中，我们使用[]来定义一个数组，如下所示：<\/p><pre><code>int a[] = new int[10]; \/\/定义了一个长度是10的int类型数组\n<\/code><\/pre><p>在Java中，我们通过如下方式访问数组中的元素：<\/p><pre><code>a[1] = 3; \/\/将下标是1的数组元素赋值为3\nSystem.out.println(a[2]); \/\/打印下标是2的数组元素值\n<\/code><\/pre><h2>流程控制<\/h2><p>流程控制语句跟其他语言类似，主要有下面几种。<\/p><ul>\n<li>if-else语句，代码示例如下所示：<\/li>\n<\/ul><pre><code>\/\/ 用法一\nint a;\nif (a &gt; 1) {\n  \/\/执行代码块\n} else {\n  \/\/执行代码块\n}\n\n\/\/ 用法二\nint a;\nif (a &gt; 1) {\n  \/\/执行代码块\n} else if (a == 1) {\n  \/\/执行代码块\n} else {\n  \/\/执行代码块\n}\n<\/code><\/pre><ul>\n<li>switch-case语句，代码示例如下所示：<\/li>\n<\/ul><pre><code>int a;\nswitch (a) {\n  case 1:\n    \/\/执行代码块\n    break;\n  case 2:\n    \/\/执行代码块\n    break;\n  default:\n    \/\/默认执行代码\n}\n<\/code><\/pre><ul>\n<li>for、while循环，代码示例如下所示：<\/li>\n<\/ul><pre><code>for (int i = 0; i &lt; 10; ++i) {\n  \/\/ 循环执行10次此代码块\n}\n\nint i = 0;\nwhile (i &lt; 10) {\n  \/\/ 循环执行10次此代码块\n}\n<\/code><\/pre><ul>\n<li>continue、break、return，代码示例如下所示：<\/li>\n<\/ul><pre><code>for (int i = 0; i &lt; 10; ++i) {\n  if (i == 4) {\n    continue; \/\/跳过本次循环，不会打印出4这个值\n  }\n  System.out.println(i);\n}\n\nfor (int i = 0; i &lt; 10; ++i) {\n  if (i == 4) {\n    break; \/\/提前终止循环，只会打印0、1、2、3\n  }\n  System.out.println(i);\n}\n\npublic void func(int a) {\n  if (a == 1) {\n    return; \/\/结束一个函数，从此处返回\n  }\n  System.out.println(a);\n}\n<\/code><\/pre><h2>类、对象<\/h2><p>Java语言使用关键词class来定义一个类，类中包含成员变量（也叫作属性）和方法（也叫作函数），其中有一种特殊的函数叫作构造函数，其命名比较固定，跟类名相同。除此之外，Java语言通过new关键词来创建一个类的对象，并且可以通过构造函数，初始化一些成员变量的值。代码示例如下所示：<\/p><pre><code>public class Dog { \/\/ 定义了一个Dog类\n  private int age; \/\/ 属性或者成员变量\n  private int weight;\n\n  public Dog(int age, int weight) { \/\/ 构造函数\n    this.age = age;\n    this.weight = weight;\n  }\n\n  public int getAge() { \/\/ 函数或者方法\n    return age;\n  }\n  \n  public int getWeigt() {\n    return weight;\n  }\n  \n  public void run() {\n    \/\/ ...\n  }\n}\n\nDog dog1 = new Dog(2, 10);\/\/通过new关键词创建了一个Dog对象dog1\nint age = dog1.getAge();\/\/调用dog1的getAge()方法\ndog1.run();\/\/调用dog1的run()方法\n<\/code><\/pre><h2>权限修饰符<\/h2><p>在前面的代码示例中，我们多次用到private、public，它们跟protected一起，构成了Java语言的三个权限修饰符。权限修饰符可以修饰函数、成员变量。<\/p><ul>\n<li>private修饰的函数或者成员变量，只能在类内部使用。<\/li>\n<li>protected修饰的函数或者成员变量，可以在类及其子类内使用。<\/li>\n<li>public修饰的函数或者成员变量，可以被任意访问。<\/li>\n<\/ul><p>除此之外，权限修饰符还可以修饰类，不过，专栏中所有的类定义都是public访问权限的，所以，我们可以不用去了解三个修饰符修饰类的区别。<\/p><p>对于权限修饰符的理解，我们可以参看下面的代码示例：<\/p><pre><code>public class Dog {\/\/ public修饰类\n  private int age; \/\/ private修饰属性，只能在类内部使用\n  private int weight;\n  \n  public Dog(int age, int weight) {\n    this.age = age;\n    this.weight = weight;\n  }\n\n  public int getAge() { \/\/public修饰的方法，任意代码都是可以调用\n    return age;\n  }\n  \n  public void run() {\n    \/\/ ...\n  }\n\n}\n<\/code><\/pre><h2>继承<\/h2><p>Java语言使用extends关键字来实现继承。被继承的类叫作父类，继承类叫作子类。子类继承父类的所有非private属性和方法。具体的代码示例如下所示：<\/p><pre><code>public class Animal { \/\/ 父类\n  protected int age;\n  protected int weight;\n  \n  public Animal(int age, int weight) {\n    this.age = age;\n    this.weight = weight;\n  }\n  \n  public int getAge() { \/\/ 函数或者方法\n    return age;\n  }\n  \n  public int getWeigt() {\n    return weight;\n  }\n  \n  public void run() {\n    \/\/ ...\n  }\n}\n\npublic class Dog extends Animal { \/\/ 子类\n  public Dog(int age, int weight) { \/\/ 构造函数\n    super(age, weight); \/\/调用父类的构造函数\n  }\n\n  public void wangwang() {\n    \/\/...\n  }\n}\n\npublic class Cat extends Animal { \/\/子类\n  public Cat(int age, int weight) { \/\/ 构造函数\n    super(age, weight); \/\/调用父类的构造函数\n  }\n  \n  public void miaomiao() {\n    \/\/...\n  }\n}\n\n\/\/使用举例\nDog dog = new Dog(2, 8);\ndog.run();\ndog.wangwang();\nCat cat = new Cat(1, 3);\ncat.run();\ncat.miaomiao();\n<\/code><\/pre><h2>接口<\/h2><p>Java语言通过interface关键字来定义接口。接口中只能声明方法，不能包含实现，也不能定义属性。类通过implements关键字来实现接口中定义的方法。在专栏的第8讲中，我们会详细讲解接口，所以，这里我只简单介绍一下语法。具体的代码示例如下所示：<\/p><pre><code>public interface Runnable {\n  void run();\n}\n\npublic class Dog implements Runnable {\n  private int age; \/\/ 属性或者成员变量\n  private int weight;\n\n  public Dog(int age, int weight) { \/\/ 构造函数\n    this.age = age;\n    this.weight = weight;\n  }\n\n  public int getAge() { \/\/ 函数或者方法\n    return age;\n  }\n\n  public int getWeigt() {\n    return weight;\n  }\n\n  @Override \n  public void run() { \/\/实现接口中定义的run()方法\n    \/\/ ...\n  }\n}\n<\/code><\/pre><h2>容器<\/h2><p>Java提供了一些现成的容器。容器可以理解为一些工具类，底层封装了各种数据结构。比如ArrayList底层就是数组，LinkedList底层就是链表，HashMap底层就是散列表等。这些容器我们可以拿来直接使用，不用从零开始开发，大大提高了编码的效率。具体的代码示例如下所示：<\/p><pre><code>public class DemoA {\n  private ArrayList&lt;User&gt; users;\n  \n  public void addUser(User user) {\n    users.add(user);\n  }\n}\n<\/code><\/pre><h2>异常处理<\/h2><p>Java提供了异常这种出错处理机制。我们可以指直接使用JDK提供的现成的异常类，也可以自定义异常。在Java中，我们通过关键字throw来抛出一个异常，通过throws声明函数抛出异常，通过try-catch-finally语句来捕获异常。代码示例如下所示：<\/p><pre><code>public class UserNotFoundException extends Exception { \/\/ 自定义一个异常\n  public UserNotFoundException() {\n    super();\n  }\n\n  public UserNotFoundException(String message) {\n    super(message);\n  }\n\n  public UserNotFoundException(String message, Throwable e) {\n    super(message, e);\n  }\n}\n\npublic class UserService {\n  private UserRepository userRepo;\n  public UserService(UseRepository userRepo) {\n    this.userRepo = userRepo;\n  }\n\n  public User getUserById(long userId) throws UserNotFoundException {\n    User user = userRepo.findUserById(userId);\n    if (user == null) { \/\/ throw用来抛出异常\n      throw new UserNotFoundException();\/\/代码从此处返回\n    }\n    return user;\n  }\n}\n\npublic class UserController {\n  private UserService userService;\n  public UserController(UserService userService) {\n    this.userService = userService;\n  }\n  \n  public User getUserById(long userId) {\n    User user = null;\n    try { \/\/捕获异常\n      user = userService.getUserById(userId);\n    } catch (UserNotFoundException e) {\n      System.out.println(&quot;User not found: &quot; + userId);\n    } finally { \/\/不管异常会不会发生，finally包裹的语句块总会被执行\n      System.out.println(&quot;I am always printed.&quot;);\n    }\n    return user;\n  }\n}\n<\/code><\/pre><h2>package包<\/h2><p>Java通过pacakge关键字来分门别类地组织类，通过import关键字来引入类或者package。具体的代码示例如下所示：<\/p><pre><code>\/*class DemoA*\/\npackage com.xzg.cd; \/\/ 包名com.xzg.cd\n\npublic class DemoA {\n  \/\/...\n}\n\n\/*class DemoB*\/\npackage com.xzg.alg;\n\nimport java.util.HashMap; \/\/ Java工具包JDK中的类\nimport java.util.Map;\nimport com.xzg.cd.DemoA;\n\npublic class DemoB {\n  \/\/...\n}\n<\/code><\/pre><h2>总结<\/h2><p>今天，我带你一块学习了专栏中用到的所有的Java基本语法。不过，我希望你不要纠结于专栏或者某某书籍到底是用什么编程语言来写的。语言层面的东西完全不会限制我的讲解和你的理解。这就像我们读小说一样，不管它是用英语写的，还是中文写的，故事都可以同样精彩。而且，多了解一些Java语法，对于你今后阅读Java语言编写的书籍或者文档，也很有帮助。<\/p><p>实际上，我之前在Google工作的时候，大家都不太在意自己熟悉的是哪种编程语言，很多同事都是“现学现卖”，什么项目适合用什么语言就现学什么语言。除此之外，Google在招聘的时候，也不限定候选人一定要熟悉哪种编程语言，也很少问跟语言特性相关的问题。因为他们觉得，编程语言只是一个工具，对于一个有一定学习能力的人，学习一门编程语言并不是件难事。<\/p><p>除此之外，对于专栏中的代码示例，你也可以用你熟悉语言重新实现一遍，我相信这也是件很有意义的事情，也更能加深你对内容的理解。<\/p><h2>课堂讨论<\/h2><p>不同的公司开发使用的编程语言可能不一样，比如阿里一般都是用Java，今日头条用Go、C++比较多。在招聘上，这些公司都倾向于招聘熟悉相应编程语言的同学，毕竟熟练掌握一门语言也是要花不少时间的，而且用熟悉的编程语言来开发，肯定会更得心应手，更不容易出错。今天课堂讨论的话题有两个：<\/p><ol>\n<li>分享一下你学习一门编程语言的经历，从入门到熟练掌握，大约花了多久的时间？有什么好的学习编程语言的方法？<\/li>\n<li>在一个程序员的技术能力评价体系中，你觉得“熟练使用某种编程语言”所占的比重有多大？<\/li>\n<\/ol><p>欢迎在留言区写下你的想法，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":false,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":84,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/96\/26\/96777fe4f95a8fb8b88c90d7d8313926.mp3","id":166698,"had_viewed":false,"article_title":"加餐一 | 用一篇文章带你了解专栏中用到的所有Java语法","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"考虑到有些同学并不熟悉Java语言，我今天用一篇文章介绍一下专栏中用到的Java语法。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/21\/e7\/21ebbc4424e9eae82e8c8e45b84d16e7.jpeg","column_sale_type":0,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"03","s":"16","h":"00"},"video_time":"","audio_title":"11.16加餐一","audio_md5":"96777fe4f95a8fb8b88c90d7d8313926","video_size":0,"text_read_percent":0,"comment_count":96,"cid":250,"article_sharetitle":"一篇文章带你了解常用的Java语法","column_is_onboard":true,"article_cshort":"<p>尽管说设计模式跟编程语言没有直接关系，但是，我们也无法完全脱离代码来讲设计模式。我本人熟悉的是Java语言，所以专栏中的代码示例我都是用Java语言来写的。考虑到有些同学并不熟悉Java语言，我今天用一篇文章介绍一下专栏中用到的Java语法。<\/p><p>如果你有一定的编程基础，熟悉一门编程语言，结合我今天讲的Java语法知识，那看懂专栏中的代码基本不成问题。<\/p><p>如果你熟悉的是C\/C++、C#、PHP，那几乎不用费多大力气，就能看懂Java代码。我当时从C++转到Java，也只看了一天的书，基本语法就全部掌握了。<\/p><p>如果你熟悉的是Python、Go、Ruby、JavaScript，这些语言的语法可能跟Java的区别稍微有些大，但是，通过这篇文章，做到能看懂也不是难事儿。<\/p><p>好了，现在，就让我们一块儿看下，专栏中用到的所有Java语言的语法。<\/p><h2>Hello World<\/h2><p>我们先来看一下，Java语言的Hello World代码如何编写。<\/p><p>在Java中，所有的代码都必须写在类里面，所以，我们定义一个HelloWorld类。main()函数是程序执行的入口。main()函数中调用了Java开发包JDK提供的打印函数System.out.println()来打印hello world字符串。除此之外，Java中有两种代码注释方式，第一种是“\/\/注释…”双斜杠，表示后面的字符串都是注释，第二种是“\/*注释…*\/”，表示中间的内容都是注释。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1573920000,"score":"141573920000"},"code":0}