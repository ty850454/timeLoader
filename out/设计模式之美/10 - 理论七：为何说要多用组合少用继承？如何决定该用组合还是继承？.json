{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":1,"audio_size":10435516,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/28\/35\/2826544854cccd7c8622e23e2cbd7c35.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/1b\/21\/1ba5e1f013dc89eec2f928757158b121\/ld\/ld.m3u8","chapter_id":"1037","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":33},"neighbors":{"left":{"article_title":"09 | 理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？","id":165114},"right":{"article_title":"11 | 实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？","id":169600}},"audio_time":"00:10:51","video_height":0,"rate_percent":3,"article_content":"<p>在面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。为什么不推荐使用继承？组合相比继承有哪些优势？如何判断该用组合还是继承？今天，我们就围绕着这三个问题，来详细讲解一下这条设计原则。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>为什么不推荐使用继承？<\/h2><p>继承是面向对象的四大特性之一，用来表示类之间的is-a关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。所以，对于是否应该在项目中使用继承，网上有很多争议。很多人觉得继承是一种反模式，应该尽量少用，甚至不用。为什么会有这样的争议？我们通过一个例子来解释一下。<\/p><p>假设我们要设计一个关于鸟的类。我们将“鸟类”这样一个抽象的事物概念，定义为一个抽象类AbstractBird。所有更细分的鸟，比如麻雀、鸽子、乌鸦等，都继承这个抽象类。<\/p><p>我们知道，大部分鸟都会飞，那我们可不可以在AbstractBird抽象类中，定义一个fly()方法呢？答案是否定的。尽管大部分鸟都会飞，但也有特例，比如鸵鸟就不会飞。鸵鸟继承具有fly()方法的父类，那鸵鸟就具有“飞”这样的行为，这显然不符合我们对现实世界中事物的认识。当然，你可能会说，我在鸵鸟这个子类中重写（override）fly()方法，让它抛出UnSupportedMethodException异常不就可以了吗？具体的代码实现如下所示：<\/p><!-- [[[read_end]]] --><pre><code>public class AbstractBird {\n  \/\/...省略其他属性和方法...\n  public void fly() { \/\/... }\n}\n\npublic class Ostrich extends AbstractBird { \/\/鸵鸟\n  \/\/...省略其他属性和方法...\n  public void fly() {\n    throw new UnSupportedMethodException(&quot;I can't fly.'&quot;);\n  }\n}\n<\/code><\/pre><p>这种设计思路虽然可以解决问题，但不够优美。因为除了鸵鸟之外，不会飞的鸟还有很多，比如企鹅。对于这些不会飞的鸟来说，我们都需要重写fly()方法，抛出异常。这样的设计，一方面，徒增了编码的工作量；另一方面，也违背了我们之后要讲的最小知识原则（Least Knowledge Principle，也叫最少知识原则或者迪米特法则），暴露不该暴露的接口给外部，增加了类使用过程中被误用的概率。<\/p><p>你可能又会说，那我们再通过AbstractBird类派生出两个更加细分的抽象类：会飞的鸟类AbstractFlyableBird和不会飞的鸟类AbstractUnFlyableBird，让麻雀、乌鸦这些会飞的鸟都继承AbstractFlyableBird，让鸵鸟、企鹅这些不会飞的鸟，都继承AbstractUnFlyableBird类，不就可以了吗？具体的继承关系如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/1e\/b7\/1e27919f63ef615dba98bc00673914b7.jpg\" alt=\"\"><\/p><p>从图中我们可以看出，继承关系变成了三层。不过，整体上来讲，目前的继承关系还比较简单，层次比较浅，也算是一种可以接受的设计思路。我们再继续加点难度。在刚刚这个场景中，我们只关注“鸟会不会飞”，但如果我们还关注“鸟会不会叫”，那这个时候，我们又该如何设计类之间的继承关系呢？<\/p><p>是否会飞？是否会叫？两个行为搭配起来会产生四种情况：会飞会叫、不会飞会叫、会飞不会叫、不会飞不会叫。如果我们继续沿用刚才的设计思路，那就需要再定义四个抽象类（AbstractFlyableTweetableBird、AbstractFlyableUnTweetableBird、AbstractUnFlyableTweetableBird、AbstractUnFlyableUnTweetableBird）。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/3f\/c6\/3f99fa541e7ec7656a1dd35cc4f28bc6.jpg\" alt=\"\"><\/p><p>如果我们还需要考虑“是否会下蛋”这样一个行为，那估计就要组合爆炸了。类的继承层次会越来越深、继承关系会越来越复杂。而这种层次很深、很复杂的继承关系，一方面，会导致代码的可读性变差。因为我们要搞清楚某个类具有哪些方法、属性，必须阅读父类的代码、父类的父类的代码……一直追溯到最顶层父类的代码。另一方面，这也破坏了类的封装特性，将父类的实现细节暴露给了子类。子类的实现依赖父类的实现，两者高度耦合，一旦父类代码修改，就会影响所有子类的逻辑。<\/p><p>总之，继承最大的问题就在于：继承层次过深、继承关系过于复杂会影响到代码的可读性和可维护性。这也是为什么我们不推荐使用继承。那刚刚例子中继承存在的问题，我们又该如何来解决呢？你可以先自己思考一下，再听我下面的讲解。<\/p><h2>组合相比继承有哪些优势？<\/h2><p>实际上，我们可以利用组合（composition）、接口、委托（delegation）三个技术手段，一块儿来解决刚刚继承存在的问题。<\/p><p>我们前面讲到接口的时候说过，接口表示具有某种行为特性。针对“会飞”这样一个行为特性，我们可以定义一个Flyable接口，只让会飞的鸟去实现这个接口。对于会叫、会下蛋这些行为特性，我们可以类似地定义Tweetable接口、EggLayable接口。我们将这个设计思路翻译成Java代码的话，就是下面这个样子：<\/p><pre><code>public interface Flyable {\n  void fly();\n}\npublic interface Tweetable {\n  void tweet();\n}\npublic interface EggLayable {\n  void layEgg();\n}\npublic class Ostrich implements Tweetable, EggLayable {\/\/鸵鸟\n  \/\/... 省略其他属性和方法...\n  @Override\n  public void tweet() { \/\/... }\n  @Override\n  public void layEgg() { \/\/... }\n}\npublic class Sparrow impelents Flayable, Tweetable, EggLayable {\/\/麻雀\n  \/\/... 省略其他属性和方法...\n  @Override\n  public void fly() { \/\/... }\n  @Override\n  public void tweet() { \/\/... }\n  @Override\n  public void layEgg() { \/\/... }\n}\n<\/code><\/pre><p>不过，我们知道，接口只声明方法，不定义实现。也就是说，每个会下蛋的鸟都要实现一遍layEgg()方法，并且实现逻辑是一样的，这就会导致代码重复的问题。那这个问题又该如何解决呢？<\/p><p>我们可以针对三个接口再定义三个实现类，它们分别是：实现了fly()方法的FlyAbility类、实现了tweet()方法的TweetAbility类、实现了layEgg()方法的EggLayAbility类。然后，通过组合和委托技术来消除代码重复。具体的代码实现如下所示：<\/p><pre><code>public interface Flyable {\n  void fly()；\n}\npublic class FlyAbility implements Flyable {\n  @Override\n  public void fly() { \/\/... }\n}\n\/\/省略Tweetable\/TweetAbility\/EggLayable\/EggLayAbility\n\npublic class Ostrich implements Tweetable, EggLayable {\/\/鸵鸟\n  private TweetAbility tweetAbility = new TweetAbility(); \/\/组合\n  private EggLayAbility eggLayAbility = new EggLayAbility(); \/\/组合\n  \/\/... 省略其他属性和方法...\n  @Override\n  public void tweet() {\n    tweetAbility.tweet(); \/\/ 委托\n  }\n  @Override\n  public void layEgg() {\n    eggLayAbility.layEgg(); \/\/ 委托\n  }\n}\n<\/code><\/pre><p>我们知道继承主要有三个作用：表示is-a关系，支持多态特性，代码复用。而这三个作用都可以通过其他技术手段来达成。比如is-a关系，我们可以通过组合和接口的has-a关系来替代；多态特性我们可以利用接口来实现；代码复用我们可以通过组合和委托来实现。所以，从理论上讲，通过组合、接口、委托三个技术手段，我们完全可以替换掉继承，在项目中不用或者少用继承关系，特别是一些复杂的继承关系。<\/p><h2>如何判断该用组合还是继承？<\/h2><p>尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。从上面的例子来看，继承改写成组合意味着要做更细粒度的类的拆分。这也就意味着，我们要定义更多的类和接口。类和接口的增多也就或多或少地增加代码的复杂程度和维护成本。所以，在实际的项目开发中，我们还是要根据具体的情况，来具体选择该用继承还是组合。<\/p><p>如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（比如，最多有两层继承关系），继承关系不复杂，我们就可以大胆地使用继承。反之，系统越不稳定，继承层次很深，继承关系复杂，我们就尽量使用组合来替代继承。<\/p><p>除此之外，还有一些设计模式会固定使用继承或者组合。比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系。<\/p><p>前面我们讲到继承可以实现代码复用。利用继承特性，我们把相同的属性和方法，抽取出来，定义到父类中。子类复用父类中的属性和方法，达到代码复用的目的。但是，有的时候，从业务含义上，A类和B类并不一定具有继承关系。比如，Crawler类和PageAnalyzer类，它们都用到了URL拼接和分割的功能，但并不具有继承关系（既不是父子关系，也不是兄弟关系）。仅仅为了代码复用，生硬地抽象出一个父类出来，会影响到代码的可读性。如果不熟悉背后设计思路的同事，发现Crawler类和PageAnalyzer类继承同一个父类，而父类中定义的却只是URL相关的操作，会觉得这个代码写得莫名其妙，理解不了。这个时候，使用组合就更加合理、更加灵活。具体的代码实现如下所示：<\/p><pre><code>public class Url {\n  \/\/...省略属性和方法\n}\n\npublic class Crawler {\n  private Url url; \/\/ 组合\n  public Crawler() {\n    this.url = new Url();\n  }\n  \/\/...\n}\n\npublic class PageAnalyzer {\n  private Url url; \/\/ 组合\n  public PageAnalyzer() {\n    this.url = new Url();\n  }\n  \/\/..\n}\n<\/code><\/pre><p>还有一些特殊的场景要求我们必须使用继承。如果你不能改变一个函数的入参类型，而入参又非接口，为了支持多态，只能采用继承来实现。比如下面这样一段代码，其中FeignClient是一个外部类，我们没有权限去修改这部分代码，但是我们希望能重写这个类在运行时执行的encode()函数。这个时候，我们只能采用继承来实现了。<\/p><pre><code>public class FeignClient { \/\/ Feign Client框架代码\n  \/\/...省略其他代码...\n  public void encode(String url) { \/\/... }\n}\n\npublic void demofunction(FeignClient feignClient) {\n  \/\/...\n  feignClient.encode(url);\n  \/\/...\n}\n\npublic class CustomizedFeignClient extends FeignClient {\n  @Override\n  public void encode(String url) { \/\/...重写encode的实现...}\n}\n\n\/\/ 调用\nFeignClient client = new CustomizedFeignClient();\ndemofunction(client);\n<\/code><\/pre><p>尽管有些人说，要杜绝继承，100%用组合代替继承，但是我的观点没那么极端！之所以“多用组合少用继承”这个口号喊得这么响，只是因为，长期以来，我们过度使用继承。还是那句话，组合并不完美，继承也不是一无是处。只要我们控制好它们的副作用、发挥它们各自的优势，在不同的场合下，恰当地选择使用继承还是组合，这才是我们所追求的境界。<\/p><h2>重点回顾<\/h2><p>到此，今天的内容就讲完了。我们一块儿来回顾一下，你需要重点掌握的知识点。<\/p><p><strong>1.为什么不推荐使用继承？<\/strong><\/p><p>继承是面向对象的四大特性之一，用来表示类之间的is-a关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。在这种情况下，我们应该尽量少用，甚至不用继承。<\/p><p><strong>2.组合相比继承有哪些优势？<\/strong><\/p><p>继承主要有三个作用：表示is-a关系，支持多态特性，代码复用。而这三个作用都可以通过组合、接口、委托三个技术手段来达成。除此之外，利用组合还能解决层次过深、过复杂的继承关系影响代码可维护性的问题。<\/p><p><strong>3.如何判断该用组合还是继承？<\/strong><\/p><p>尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。在实际的项目开发中，我们还是要根据具体的情况，来选择该用继承还是组合。如果类之间的继承结构稳定，层次比较浅，关系不复杂，我们就可以大胆地使用继承。反之，我们就尽量使用组合来替代继承。除此之外，还有一些设计模式、特殊的应用场景，会固定使用继承或者组合。<\/p><h2>课堂讨论<\/h2><p>我们在基于MVC架构开发Web应用的时候，经常会在数据库层定义Entity，在Service业务层定义BO（Business Object），在Controller接口层定义VO（View Object）。大部分情况下，Entity、BO、VO三者之间的代码有很大重复，但又不完全相同。我们该如何处理Entity、BO、VO代码重复的问题呢？<\/p><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":1608619270,"max_rate":1,"cur_rate":1,"is_finished":false,"total_rate":44,"learned_seconds":89},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":192,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/1b\/21\/1ba5e1f013dc89eec2f928757158b121.mp3","id":169593,"had_viewed":true,"article_title":"10 | 理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"组合不是完美的，继承也并非一无是处。在实际的项目开发中，我们要根据具体情况，来选择该用继承还是组合。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/ab\/48\/ab3207695a826f3e120af8024973ba48.jpeg","column_sale_type":0,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"10","s":"51","h":"00"},"video_time":"","audio_title":"11.07 王争10","audio_md5":"1ba5e1f013dc89eec2f928757158b121","video_size":0,"text_read_percent":0,"comment_count":175,"cid":250,"article_sharetitle":"为何说要多用组合少用继承？如何决定该用组合还是继承？","column_is_onboard":true,"article_cshort":"<p>在面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。为什么不推荐使用继承？组合相比继承有哪些优势？如何判断该用组合还是继承？今天，我们就围绕着这三个问题，来详细讲解一下这条设计原则。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>为什么不推荐使用继承？<\/h2><p>继承是面向对象的四大特性之一，用来表示类之间的is-a关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。所以，对于是否应该在项目中使用继承，网上有很多争议。很多人觉得继承是一种反模式，应该尽量少用，甚至不用。为什么会有这样的争议？我们通过一个例子来解释一下。<\/p><p>假设我们要设计一个关于鸟的类。我们将“鸟类”这样一个抽象的事物概念，定义为一个抽象类AbstractBird。所有更细分的鸟，比如麻雀、鸽子、乌鸦等，都继承这个抽象类。<\/p><p>我们知道，大部分鸟都会飞，那我们可不可以在AbstractBird抽象类中，定义一个fly()方法呢？答案是否定的。尽管大部分鸟都会飞，但也有特例，比如鸵鸟就不会飞。鸵鸟继承具有fly()方法的父类，那鸵鸟就具有“飞”这样的行为，这显然不符合我们对现实世界中事物的认识。当然，你可能会说，我在鸵鸟这个子类中重写（override）fly()方法，让它抛出UnSupportedMethodException异常不就可以了吗？具体的代码实现如下所示：<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1574611200,"score":"31574611200"},"code":0}