{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":0,"audio_size":10108666,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/ec\/83\/eca552b9c79bf7bd47eec16c63e9e583.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/b7\/5f\/b7f23a7b022cc2e647e3a8b0d6b9575f\/ld\/ld.m3u8","chapter_id":"1271","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":5},"neighbors":{"left":{"article_title":"54 | 享元模式（上）：如何利用享元模式优化文本编辑器的内存占用？","id":208572},"right":{"article_title":"56 | 观察者模式（上）：详解各种应用场景下观察者模式的不同实现方式","id":210170}},"audio_time":"00:10:31","video_height":0,"rate_percent":0,"article_content":"<p>上一节课，我们通过棋牌游戏和文本编辑器这样两个实际的例子，学习了享元模式的原理、实现以及应用场景。用一句话总结一下，享元模式中的“享元”指被共享的单元。享元模式通过复用对象，以达到节省内存的目的。<\/p><p>今天，我再用一节课的时间带你剖析一下，享元模式在Java Integer、String中的应用。如果你不熟悉Java编程语言，那也不用担心看不懂，因为今天的内容主要还是介绍设计思路，跟语言本身关系不大。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>享元模式在Java Integer中的应用<\/h2><p>我们先来看下面这样一段代码。你可以先思考下，这段代码会输出什么样的结果。<\/p><pre><code>Integer i1 = 56;\nInteger i2 = 56;\nInteger i3 = 129;\nInteger i4 = 129;\nSystem.out.println(i1 == i2);\nSystem.out.println(i3 == i4);\n<\/code><\/pre><p>如果不熟悉Java语言，你可能会觉得，i1和i2值都是56，i3和i4值都是129，i1跟i2值相等，i3跟i4值相等，所以输出结果应该是两个true。这样的分析是不对的，主要还是因为你对Java语法不熟悉。要正确地分析上面的代码，我们需要弄清楚下面两个问题：<\/p><ul>\n<li>如何判定两个Java对象是否相等（也就代码中的“==”操作符的含义）？<\/li>\n<li>什么是自动装箱（Autoboxing）和自动拆箱（Unboxing）？<\/li>\n<\/ul><p>在<a href=\"https:\/\/time.geekbang.org\/column\/article\/166698\">加餐一<\/a>中，我们讲到，Java为基本数据类型提供了对应的包装器类型。具体如下所示：<\/p><!-- [[[read_end]]] --><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/5f\/a0\/5f93c0412c9ee8b563383c3583693ba0.jpg\" alt=\"\"><\/p><p>所谓的自动装箱，就是自动将基本数据类型转换为包装器类型。所谓的自动拆箱，也就是自动将包装器类型转化为基本数据类型。具体的代码示例如下所示：<\/p><pre><code>Integer i = 56; \/\/自动装箱\nint j = i; \/\/自动拆箱\n<\/code><\/pre><p>数值56是基本数据类型int，当赋值给包装器类型（Integer）变量的时候，触发自动装箱操作，创建一个Integer类型的对象，并且赋值给变量i。其底层相当于执行了下面这条语句：<\/p><pre><code>Integer i = 59；底层执行了：Integer i = Integer.valueOf(59);\n<\/code><\/pre><p>反过来，当把包装器类型的变量i，赋值给基本数据类型变量j的时候，触发自动拆箱操作，将i中的数据取出，赋值给j。其底层相当于执行了下面这条语句：<\/p><pre><code>int j = i; 底层执行了：int j = i.intValue();\n<\/code><\/pre><p>弄清楚了自动装箱和自动拆箱，我们再来看，如何判定两个对象是否相等？不过，在此之前，我们先要搞清楚，Java对象在内存中是如何存储的。我们通过下面这个例子来说明一下。<\/p><pre><code>User a = new User(123, 23); \/\/ id=123, age=23\n<\/code><\/pre><p>针对这条语句，我画了一张内存存储结构图，如下所示。a存储的值是User对象的内存地址，在图中就表现为a指向User对象。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/04\/dc\/04f879d7d72b96965f4e06a21ff13bdc.jpg\" alt=\"\"><\/p><p>当我们通过“==”来判定两个对象是否相等的时候，实际上是在判断两个局部变量存储的地址是否相同，换句话说，是在判断两个局部变量是否指向相同的对象。<\/p><p>了解了Java的这几个语法之后，我们重新看一下开头的那段代码。<\/p><pre><code>Integer i1 = 56;\nInteger i2 = 56;\nInteger i3 = 129;\nInteger i4 = 129;\nSystem.out.println(i1 == i2);\nSystem.out.println(i3 == i4);\n<\/code><\/pre><p>前4行赋值语句都会触发自动装箱操作，也就是会创建Integer对象并且赋值给i1、i2、i3、i4这四个变量。根据刚刚的讲解，i1、i2尽管存储的数值相同，都是56，但是指向不同的Integer对象，所以通过“==”来判定是否相同的时候，会返回false。同理，i3==i4判定语句也会返回false。<\/p><p>不过，上面的分析还是不对，答案并非是两个false，而是一个true，一个false。看到这里，你可能会比较纳闷了。实际上，这正是因为Integer用到了享元模式来复用对象，才导致了这样的运行结果。当我们通过自动装箱，也就是调用valueOf()来创建Integer对象的时候，如果要创建的Integer对象的值在-128到127之间，会从IntegerCache类中直接返回，否则才调用new方法创建。看代码更加清晰一些，Integer类的valueOf()函数的具体代码如下所示：<\/p><pre><code>public static Integer valueOf(int i) {\n    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n<\/code><\/pre><p>实际上，这里的IntegerCache相当于，我们上一节课中讲的生成享元对象的工厂类，只不过名字不叫xxxFactory而已。我们来看它的具体代码实现。这个类是Integer的内部类，你也可以自行查看JDK源码。<\/p><pre><code>\/**\n * Cache to support the object identity semantics of autoboxing for values between\n * -128 and 127 (inclusive) as required by JLS.\n *\n * The cache is initialized on first usage.  The size of the cache\n * may be controlled by the {@code -XX:AutoBoxCacheMax=&lt;size&gt;} option.\n * During VM initialization, java.lang.Integer.IntegerCache.high property\n * may be set and saved in the private system properties in the\n * sun.misc.VM class.\n *\/\nprivate static class IntegerCache {\n    static final int low = -128;\n    static final int high;\n    static final Integer cache[];\n\n    static {\n        \/\/ high value may be configured by property\n        int h = 127;\n        String integerCacheHighPropValue =\n            sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);\n        if (integerCacheHighPropValue != null) {\n            try {\n                int i = parseInt(integerCacheHighPropValue);\n                i = Math.max(i, 127);\n                \/\/ Maximum array size is Integer.MAX_VALUE\n                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n            } catch( NumberFormatException nfe) {\n                \/\/ If the property cannot be parsed into an int, ignore it.\n            }\n        }\n        high = h;\n\n        cache = new Integer[(high - low) + 1];\n        int j = low;\n        for(int k = 0; k &lt; cache.length; k++)\n            cache[k] = new Integer(j++);\n\n        \/\/ range [-128, 127] must be interned (JLS7 5.1.7)\n        assert IntegerCache.high &gt;= 127;\n    }\n\n    private IntegerCache() {}\n}\n<\/code><\/pre><p>为什么IntegerCache只缓存-128到127之间的整型值呢？<\/p><p>在IntegerCache的代码实现中，当这个类被加载的时候，缓存的享元对象会被集中一次性创建好。毕竟整型值太多了，我们不可能在IntegerCache类中预先创建好所有的整型值，这样既占用太多内存，也使得加载IntegerCache类的时间过长。所以，我们只能选择缓存对于大部分应用来说最常用的整型值，也就是一个字节的大小（-128到127之间的数据）。<\/p><p>实际上，JDK也提供了方法来让我们可以自定义缓存的最大值，有下面两种方式。如果你通过分析应用的JVM内存占用情况，发现-128到255之间的数据占用的内存比较多，你就可以用如下方式，将缓存的最大值从127调整到255。不过，这里注意一下，JDK并没有提供设置最小值的方法。<\/p><pre><code>\/\/方法一：\n-Djava.lang.Integer.IntegerCache.high=255\n\/\/方法二：\n-XX:AutoBoxCacheMax=255\n<\/code><\/pre><p>现在，让我们再回到最开始的问题，因为56处于-128和127之间，i1和i2会指向相同的享元对象，所以i1==i2返回true。而129大于127，并不会被缓存，每次都会创建一个全新的对象，也就是说，i3和i4指向不同的Integer对象，所以i3==i4返回false。<\/p><p>实际上，除了Integer类型之外，其他包装器类型，比如Long、Short、Byte等，也都利用了享元模式来缓存-128到127之间的数据。比如，Long类型对应的LongCache享元工厂类及valueOf()函数代码如下所示：<\/p><pre><code>private static class LongCache {\n    private LongCache(){}\n\n    static final Long cache[] = new Long[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i &lt; cache.length; i++)\n            cache[i] = new Long(i - 128);\n    }\n}\n\npublic static Long valueOf(long l) {\n    final int offset = 128;\n    if (l &gt;= -128 &amp;&amp; l &lt;= 127) { \/\/ will cache\n        return LongCache.cache[(int)l + offset];\n    }\n    return new Long(l);\n}\n<\/code><\/pre><p>在我们平时的开发中，对于下面这样三种创建整型对象的方式，我们优先使用后两种。<\/p><pre><code>Integer a = new Integer(123);\nInteger a = 123;\nInteger a = Integer.valueOf(123);\n<\/code><\/pre><p>第一种创建方式并不会使用到IntegerCache，而后面两种创建方法可以利用IntegerCache缓存，返回共享的对象，以达到节省内存的目的。举一个极端一点的例子，假设程序需要创建1万个-128到127之间的Integer对象。使用第一种创建方式，我们需要分配1万个Integer对象的内存空间；使用后两种创建方式，我们最多只需要分配256个Integer对象的内存空间。<\/p><h2>享元模式在Java String中的应用<\/h2><p>刚刚我们讲了享元模式在Java Integer类中的应用，现在，我们再来看下，享元模式在Java String类中的应用。同样，我们还是先来看一段代码，你觉得这段代码输出的结果是什么呢？<\/p><pre><code>String s1 = &quot;小争哥&quot;;\nString s2 = &quot;小争哥&quot;;\nString s3 = new String(&quot;小争哥&quot;);\n\nSystem.out.println(s1 == s2);\nSystem.out.println(s1 == s3);\n<\/code><\/pre><p>上面代码的运行结果是：一个true，一个false。跟Integer类的设计思路相似，String类利用享元模式来复用相同的字符串常量（也就是代码中的“小争哥”）。JVM会专门开辟一块存储区来存储字符串常量，这块存储区叫作“字符串常量池”。上面代码对应的内存存储结构如下所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/2d\/2d\/2dfc18575c22efccca191c566b24a22d.jpg\" alt=\"\"><\/p><p>不过，String类的享元模式的设计，跟Integer类稍微有些不同。Integer类中要共享的对象，是在类加载的时候，就集中一次性创建好的。但是，对于字符串来说，我们没法事先知道要共享哪些字符串常量，所以没办法事先创建好，只能在某个字符串常量第一次被用到的时候，存储到常量池中，当之后再用到的时候，直接引用常量池中已经存在的即可，就不需要再重新创建了。<\/p><h2>重点回顾<\/h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。<\/p><p>在Java Integer的实现中，-128到127之间的整型对象会被事先创建好，缓存在IntegerCache类中。当我们使用自动装箱或者valueOf()来创建这个数值区间的整型对象时，会复用IntegerCache类事先创建好的对象。这里的IntegerCache类就是享元工厂类，事先创建好的整型对象就是享元对象。<\/p><p>在Java String类的实现中，JVM开辟一块存储区专门存储字符串常量，这块存储区叫作字符串常量池，类似于Integer中的IntegerCache。不过，跟IntegerCache不同的是，它并非事先创建好需要共享的对象，而是在程序的运行期间，根据需要来创建和缓存字符串常量。<\/p><p>除此之外，这里我再补充强调一下。<\/p><p>实际上，享元模式对JVM的垃圾回收并不友好。因为享元工厂类一直保存了对享元对象的引用，这就导致享元对象在没有任何代码使用的情况下，也并不会被JVM垃圾回收机制自动回收掉。因此，在某些情况下，如果对象的生命周期很短，也不会被密集使用，利用享元模式反倒可能会浪费更多的内存。所以，除非经过线上验证，利用享元模式真的可以大大节省内存，否则，就不要过度使用这个模式，为了一点点内存的节省而引入一个复杂的设计模式，得不偿失啊。<\/p><h2>课堂讨论<\/h2><p>IntegerCache只能缓存事先指定好的整型对象，那我们是否可以借鉴String的设计思路，不事先指定需要缓存哪些整型对象，而是在程序的运行过程中，当用到某个整型对象的时候，创建好放置到IntegerCache，下次再被用到的时候，直接从IntegerCache中返回呢？<\/p><p>如果可以这么做，请你按照这个思路重新实现一下IntegerCache类，并且能够做到在某个对象没有任何代码使用的时候，能被JVM垃圾回收机制回收掉。<\/p><p>欢迎留言和我分享你的想法，如果有收获，欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":39,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/b7\/5f\/b7f23a7b022cc2e647e3a8b0d6b9575f.mp3","id":209343,"had_viewed":false,"article_title":"55 | 享元模式（下）：剖析享元模式在Java Integer、String中的应用","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"除非经过线上验证，利用享元模式真的可以大大节省内存，否则就不要过度使用这个模式。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/1b\/03\/1b754221e7f0010eedcf22d441332c03.jpeg","column_sale_type":0,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"10","s":"31","h":"00"},"video_time":"","audio_title":"3.8 王争 音频-55_01","audio_md5":"b7f23a7b022cc2e647e3a8b0d6b9575f","video_size":0,"text_read_percent":0,"comment_count":31,"cid":250,"article_sharetitle":"剖析享元模式在Java Integer、String中的应用","column_is_onboard":true,"article_cshort":"<p>上一节课，我们通过棋牌游戏和文本编辑器这样两个实际的例子，学习了享元模式的原理、实现以及应用场景。用一句话总结一下，享元模式中的“享元”指被共享的单元。享元模式通过复用对象，以达到节省内存的目的。<\/p><p>今天，我再用一节课的时间带你剖析一下，享元模式在Java Integer、String中的应用。如果你不熟悉Java编程语言，那也不用担心看不懂，因为今天的内容主要还是介绍设计思路，跟语言本身关系不大。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>享元模式在Java Integer中的应用<\/h2><p>我们先来看下面这样一段代码。你可以先思考下，这段代码会输出什么样的结果。<\/p><pre><code>Integer i1 = 56;\nInteger i2 = 56;\nInteger i3 = 129;\nInteger i4 = 129;\nSystem.out.println(i1 == i2);\nSystem.out.println(i3 == i4);\n<\/code><\/pre><p>如果不熟悉Java语言，你可能会觉得，i1和i2值都是56，i3和i4值都是129，i1跟i2值相等，i3跟i4值相等，所以输出结果应该是两个true。这样的分析是不对的，主要还是因为你对Java语法不熟悉。要正确地分析上面的代码，我们需要弄清楚下面两个问题：<\/p><ul>\n<li>如何判定两个Java对象是否相等（也就代码中的“==”操作符的含义）？<\/li>\n<li>什么是自动装箱（Autoboxing）和自动拆箱（Unboxing）？<\/li>\n<\/ul><p>在<a href=\"https:\/\/time.geekbang.org\/column\/article\/166698\">加餐一<\/a>中，我们讲到，Java为基本数据类型提供了对应的包装器类型。具体如下所示：<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1583683200,"score":"81583683200"},"code":0}