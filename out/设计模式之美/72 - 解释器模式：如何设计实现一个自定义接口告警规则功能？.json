{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":0,"audio_size":9615034,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/5f\/58\/5fa58092bb6bd4451e775a8399550758.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/04\/f9\/0413f0c64e70074f61d0e2f2163924f9\/ld\/ld.m3u8","chapter_id":"1289","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":5},"neighbors":{"left":{"article_title":"71 | 命令模式：如何利用命令模式实现一个手游后端架构？","id":224549},"right":{"article_title":"73 | 中介模式：什么时候用中介模式？什么时候用观察者模式？","id":226710}},"audio_time":"00:10:00","video_height":0,"rate_percent":0,"article_content":"<p>上一节课，我们学习了命令模式。命令模式将请求封装成对象，方便作为函数参数传递和赋值给变量。它主要的应用场景是给命令的执行附加功能，换句话说，就是控制命令的执行，比如，排队、异步、延迟执行命令、给命令执行记录日志、撤销重做命令等等。总体上来讲，命令模式的应用范围并不广。<\/p><p>今天，我们来学习解释器模式，它用来描述如何构建一个简单的“语言”解释器。比起命令模式，解释器模式更加小众，只在一些特定的领域会被用到，比如编译器、规则引擎、正则表达式。所以，解释器模式也不是我们学习的重点，你稍微了解一下就可以了。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>解释器模式的原理和实现<\/h2><p>解释器模式的英文翻译是Interpreter Design Pattern。在GoF的《设计模式》一书中，它是这样定义的：<\/p><blockquote>\n<p>Interpreter pattern is used to defines a grammatical representation for a language and provides an interpreter to deal with this grammar.<\/p>\n<\/blockquote><p>翻译成中文就是：解释器模式为某个语言定义它的语法（或者叫文法）表示，并定义一个解释器用来处理这个语法。<\/p><!-- [[[read_end]]] --><p>看了定义，你估计会一头雾水，因为这里面有很多我们平时开发中很少接触的概念，比如“语言”“语法”“解释器”。实际上，这里的“语言”不仅仅指我们平时说的中、英、日、法等各种语言。从广义上来讲，只要是能承载信息的载体，我们都可以称之为“语言”，比如，古代的结绳记事、盲文、哑语、摩斯密码等。<\/p><p>要想了解“语言”表达的信息，我们就必须定义相应的语法规则。这样，书写者就可以根据语法规则来书写“句子”（专业点的叫法应该是“表达式”），阅读者根据语法规则来阅读“句子”，这样才能做到信息的正确传递。而我们要讲的解释器模式，其实就是用来实现根据语法规则解读“句子”的解释器。<\/p><p>为了让你更好地理解定义，我举一个比较贴近生活的例子来解释一下。<\/p><p>实际上，理解这个概念，我们可以类比中英文翻译。我们知道，把英文翻译成中文是有一定规则的。这个规则就是定义中的“语法”。我们开发一个类似Google Translate这样的翻译器，这个翻译器能够根据语法规则，将输入的中文翻译成英文。这里的翻译器就是解释器模式定义中的“解释器”。<\/p><p>刚刚翻译器这个例子比较贴近生活，现在，我们再举个更加贴近编程的例子。<\/p><p>假设我们定义了一个新的加减乘除计算“语言”，语法规则如下：<\/p><ul>\n<li>运算符只包含加、减、乘、除，并且没有优先级的概念；<\/li>\n<li>表达式（也就是前面提到的“句子”）中，先书写数字，后书写运算符，空格隔开；<\/li>\n<li>按照先后顺序，取出两个数字和一个运算符计算结果，结果重新放入数字的最头部位置，循环上述过程，直到只剩下一个数字，这个数字就是表达式最终的计算结果。<\/li>\n<\/ul><p>我们举个例子来解释一下上面的语法规则。<\/p><p>比如“ 8 3 2 4 - + * ”这样一个表达式，我们按照上面的语法规则来处理，取出数字“8 3”和“-”运算符，计算得到5，于是表达式就变成了“ 5 2 4 + * ”。然后，我们再取出“ 5 2 ”和“ + ”运算符，计算得到7，表达式就变成了“ 7 4 * ”。最后，我们取出“ 7 4”和“ * ”运算符，最终得到的结果就是28。<\/p><p>看懂了上面的语法规则，我们将它用代码实现出来，如下所示。代码非常简单，用户按照上面的规则书写表达式，传递给interpret()函数，就可以得到最终的计算结果。<\/p><pre><code>public class ExpressionInterpreter {\n  private Deque&lt;Long&gt; numbers = new LinkedList&lt;&gt;();\n\n  public long interpret(String expression) {\n    String[] elements = expression.split(&quot; &quot;);\n    int length = elements.length;\n    for (int i = 0; i &lt; (length+1)\/2; ++i) {\n      numbers.addLast(Long.parseLong(elements[i]));\n    }\n\n    for (int i = (length+1)\/2; i &lt; length; ++i) {\n      String operator = elements[i];\n      boolean isValid = &quot;+&quot;.equals(operator) || &quot;-&quot;.equals(operator)\n              || &quot;*&quot;.equals(operator) || &quot;\/&quot;.equals(operator);\n      if (!isValid) {\n        throw new RuntimeException(&quot;Expression is invalid: &quot; + expression);\n      }\n\n      long number1 = numbers.pollFirst();\n      long number2 = numbers.pollFirst();\n      long result = 0;\n      if (operator.equals(&quot;+&quot;)) {\n        result = number1 + number2;\n      } else if (operator.equals(&quot;-&quot;)) {\n        result = number1 - number2;\n      } else if (operator.equals(&quot;*&quot;)) {\n        result = number1 * number2;\n      } else if (operator.equals(&quot;\/&quot;)) {\n        result = number1 \/ number2;\n      }\n      numbers.addFirst(result);\n    }\n\n    if (numbers.size() != 1) {\n      throw new RuntimeException(&quot;Expression is invalid: &quot; + expression);\n    }\n\n    return numbers.pop();\n  }\n}\n<\/code><\/pre><p>在上面的代码实现中，语法规则的解析逻辑（第23、25、27、29行）都集中在一个函数中，对于简单的语法规则的解析，这样的设计就足够了。但是，对于复杂的语法规则的解析，逻辑复杂，代码量多，所有的解析逻辑都耦合在一个函数中，这样显然是不合适的。这个时候，我们就要考虑拆分代码，将解析逻辑拆分到独立的小类中。<\/p><p>该怎么拆分呢？我们可以借助解释器模式。<\/p><p>解释器模式的代码实现比较灵活，没有固定的模板。我们前面也说过，应用设计模式主要是应对代码的复杂性，实际上，解释器模式也不例外。它的代码实现的核心思想，就是将语法解析的工作拆分到各个小类中，以此来避免大而全的解析类。一般的做法是，将语法规则拆分成一些小的独立的单元，然后对每个单元进行解析，最终合并为对整个语法规则的解析。<\/p><p>前面定义的语法规则有两类表达式，一类是数字，一类是运算符，运算符又包括加减乘除。利用解释器模式，我们把解析的工作拆分到NumberExpression、AdditionExpression、SubstractionExpression、MultiplicationExpression、DivisionExpression这样五个解析类中。<\/p><p>按照这个思路，我们对代码进行重构，重构之后的代码如下所示。当然，因为加减乘除表达式的解析比较简单，利用解释器模式的设计思路，看起来有点过度设计。不过呢，这里我主要是为了解释原理，你明白意思就好，不用过度细究这个例子。<\/p><pre><code>public interface Expression {\n  long interpret();\n}\n\npublic class NumberExpression implements Expression {\n  private long number;\n\n  public NumberExpression(long number) {\n    this.number = number;\n  }\n\n  public NumberExpression(String number) {\n    this.number = Long.parseLong(number);\n  }\n\n  @Override\n  public long interpret() {\n    return this.number;\n  }\n}\n\npublic class AdditionExpression implements Expression {\n  private Expression exp1;\n  private Expression exp2;\n\n  public AdditionExpression(Expression exp1, Expression exp2) {\n    this.exp1 = exp1;\n    this.exp2 = exp2;\n  }\n\n  @Override\n  public long interpret() {\n    return exp1.interpret() + exp2.interpret();\n  }\n}\n\/\/ SubstractionExpression\/MultiplicationExpression\/DivisionExpression与AdditionExpression代码结构类似，这里就省略了\n\npublic class ExpressionInterpreter {\n  private Deque&lt;Expression&gt; numbers = new LinkedList&lt;&gt;();\n\n  public long interpret(String expression) {\n    String[] elements = expression.split(&quot; &quot;);\n    int length = elements.length;\n    for (int i = 0; i &lt; (length+1)\/2; ++i) {\n      numbers.addLast(new NumberExpression(elements[i]));\n    }\n\n    for (int i = (length+1)\/2; i &lt; length; ++i) {\n      String operator = elements[i];\n      boolean isValid = &quot;+&quot;.equals(operator) || &quot;-&quot;.equals(operator)\n              || &quot;*&quot;.equals(operator) || &quot;\/&quot;.equals(operator);\n      if (!isValid) {\n        throw new RuntimeException(&quot;Expression is invalid: &quot; + expression);\n      }\n\n      Expression exp1 = numbers.pollFirst();\n      Expression exp2 = numbers.pollFirst();\n      Expression combinedExp = null;\n      if (operator.equals(&quot;+&quot;)) {\n        combinedExp = new AdditionExpression(exp1, exp2);\n      } else if (operator.equals(&quot;-&quot;)) {\n        combinedExp = new AdditionExpression(exp1, exp2);\n      } else if (operator.equals(&quot;*&quot;)) {\n        combinedExp = new AdditionExpression(exp1, exp2);\n      } else if (operator.equals(&quot;\/&quot;)) {\n        combinedExp = new AdditionExpression(exp1, exp2);\n      }\n      long result = combinedExp.interpret();\n      numbers.addFirst(new NumberExpression(result));\n    }\n\n    if (numbers.size() != 1) {\n      throw new RuntimeException(&quot;Expression is invalid: &quot; + expression);\n    }\n\n    return numbers.pop().interpret();\n  }\n}\n<\/code><\/pre><h2>解释器模式实战举例<\/h2><p>接下来，我们再来看一个更加接近实战的例子，也就是咱们今天标题中的问题：如何实现一个自定义接口告警规则功能？<\/p><p>在我们平时的项目开发中，监控系统非常重要，它可以时刻监控业务系统的运行情况，及时将异常报告给开发者。比如，如果每分钟接口出错数超过100，监控系统就通过短信、微信、邮件等方式发送告警给开发者。<\/p><p>一般来讲，监控系统支持开发者自定义告警规则，比如我们可以用下面这样一个表达式，来表示一个告警规则，它表达的意思是：每分钟API总出错数超过100或者每分钟API总调用数超过10000就触发告警。<\/p><pre><code>api_error_per_minute &gt; 100 || api_count_per_minute &gt; 10000\n<\/code><\/pre><p>在监控系统中，告警模块只负责根据统计数据和告警规则，判断是否触发告警。至于每分钟API接口出错数、每分钟接口调用数等统计数据的计算，是由其他模块来负责的。其他模块将统计数据放到一个Map中（数据的格式如下所示），发送给告警模块。接下来，我们只关注告警模块。<\/p><pre><code>Map&lt;String, Long&gt; apiStat = new HashMap&lt;&gt;();\napiStat.put(&quot;api_error_per_minute&quot;, 103);\napiStat.put(&quot;api_count_per_minute&quot;, 987);\n<\/code><\/pre><p>为了简化讲解和代码实现，我们假设自定义的告警规则只包含“||、&amp;&amp;、&gt;、&lt;、==”这五个运算符，其中，“&gt;、&lt;、==”运算符的优先级高于“||、&amp;&amp;”运算符，“&amp;&amp;”运算符优先级高于“||”。在表达式中，任意元素之间需要通过空格来分隔。除此之外，用户可以自定义要监控的key，比如前面的api_error_per_minute、api_count_per_minute。<\/p><p>那如何实现上面的需求呢？我写了一个骨架代码，如下所示，其中的核心的实现我没有给出，你可以当作面试题，自己试着去补全一下，然后再看我的讲解。<\/p><pre><code>public class AlertRuleInterpreter {\n\n  \/\/ key1 &gt; 100 &amp;&amp; key2 &lt; 1000 || key3 == 200\n  public AlertRuleInterpreter(String ruleExpression) {\n    \/\/TODO:由你来完善\n  }\n\n  \/\/&lt;String, Long&gt; apiStat = new HashMap&lt;&gt;();\n  \/\/apiStat.put(&quot;key1&quot;, 103);\n  \/\/apiStat.put(&quot;key2&quot;, 987);\n  public boolean interpret(Map&lt;String, Long&gt; stats) {\n    \/\/TODO:由你来完善\n  }\n\n}\n\npublic class DemoTest {\n  public static void main(String[] args) {\n    String rule = &quot;key1 &gt; 100 &amp;&amp; key2 &lt; 30 || key3 &lt; 100 || key4 == 88&quot;;\n    AlertRuleInterpreter interpreter = new AlertRuleInterpreter(rule);\n    Map&lt;String, Long&gt; stats = new HashMap&lt;&gt;();\n    stats.put(&quot;key1&quot;, 101l);\n    stats.put(&quot;key3&quot;, 121l);\n    stats.put(&quot;key4&quot;, 88l);\n    boolean alert = interpreter.interpret(stats);\n    System.out.println(alert);\n  }\n}\n<\/code><\/pre><p>实际上，我们可以把自定义的告警规则，看作一种特殊“语言”的语法规则。我们实现一个解释器，能够根据规则，针对用户输入的数据，判断是否触发告警。利用解释器模式，我们把解析表达式的逻辑拆分到各个小类中，避免大而复杂的大类的出现。按照这个实现思路，我把刚刚的代码补全，如下所示，你可以拿你写的代码跟我写的对比一下。<\/p><pre><code>public interface Expression {\n  boolean interpret(Map&lt;String, Long&gt; stats);\n}\n\npublic class GreaterExpression implements Expression {\n  private String key;\n  private long value;\n\n  public GreaterExpression(String strExpression) {\n    String[] elements = strExpression.trim().split(&quot;\\\\s+&quot;);\n    if (elements.length != 3 || !elements[1].trim().equals(&quot;&gt;&quot;)) {\n      throw new RuntimeException(&quot;Expression is invalid: &quot; + strExpression);\n    }\n    this.key = elements[0].trim();\n    this.value = Long.parseLong(elements[2].trim());\n  }\n\n  public GreaterExpression(String key, long value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  @Override\n  public boolean interpret(Map&lt;String, Long&gt; stats) {\n    if (!stats.containsKey(key)) {\n      return false;\n    }\n    long statValue = stats.get(key);\n    return statValue &gt; value;\n  }\n}\n\n\/\/ LessExpression\/EqualExpression跟GreaterExpression代码类似，这里就省略了\n\npublic class AndExpression implements Expression {\n  private List&lt;Expression&gt; expressions = new ArrayList&lt;&gt;();\n\n  public AndExpression(String strAndExpression) {\n    String[] strExpressions = strAndExpression.split(&quot;&amp;&amp;&quot;);\n    for (String strExpr : strExpressions) {\n      if (strExpr.contains(&quot;&gt;&quot;)) {\n        expressions.add(new GreaterExpression(strExpr));\n      } else if (strExpr.contains(&quot;&lt;&quot;)) {\n        expressions.add(new LessExpression(strExpr));\n      } else if (strExpr.contains(&quot;==&quot;)) {\n        expressions.add(new EqualExpression(strExpr));\n      } else {\n        throw new RuntimeException(&quot;Expression is invalid: &quot; + strAndExpression);\n      }\n    }\n  }\n\n  public AndExpression(List&lt;Expression&gt; expressions) {\n    this.expressions.addAll(expressions);\n  }\n\n  @Override\n  public boolean interpret(Map&lt;String, Long&gt; stats) {\n    for (Expression expr : expressions) {\n      if (!expr.interpret(stats)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n}\n\npublic class OrExpression implements Expression {\n  private List&lt;Expression&gt; expressions = new ArrayList&lt;&gt;();\n\n  public OrExpression(String strOrExpression) {\n    String[] andExpressions = strOrExpression.split(&quot;\\\\|\\\\|&quot;);\n    for (String andExpr : andExpressions) {\n      expressions.add(new AndExpression(andExpr));\n    }\n  }\n\n  public OrExpression(List&lt;Expression&gt; expressions) {\n    this.expressions.addAll(expressions);\n  }\n\n  @Override\n  public boolean interpret(Map&lt;String, Long&gt; stats) {\n    for (Expression expr : expressions) {\n      if (expr.interpret(stats)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\npublic class AlertRuleInterpreter {\n  private Expression expression;\n\n  public AlertRuleInterpreter(String ruleExpression) {\n    this.expression = new OrExpression(ruleExpression);\n  }\n\n  public boolean interpret(Map&lt;String, Long&gt; stats) {\n    return expression.interpret(stats);\n  }\n} \n<\/code><\/pre><h2>重点回顾<\/h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。<\/p><p>解释器模式为某个语言定义它的语法（或者叫文法）表示，并定义一个解释器用来处理这个语法。实际上，这里的“语言”不仅仅指我们平时说的中、英、日、法等各种语言。从广义上来讲，只要是能承载信息的载体，我们都可以称之为“语言”，比如，古代的结绳记事、盲文、哑语、摩斯密码等。<\/p><p>要想了解“语言”要表达的信息，我们就必须定义相应的语法规则。这样，书写者就可以根据语法规则来书写“句子”（专业点的叫法应该是“表达式”），阅读者根据语法规则来阅读“句子”，这样才能做到信息的正确传递。而我们要讲的解释器模式，其实就是用来实现根据语法规则解读“句子”的解释器。<\/p><p>解释器模式的代码实现比较灵活，没有固定的模板。我们前面说过，应用设计模式主要是应对代码的复杂性，解释器模式也不例外。它的代码实现的核心思想，就是将语法解析的工作拆分到各个小类中，以此来避免大而全的解析类。一般的做法是，将语法规则拆分一些小的独立的单元，然后对每个单元进行解析，最终合并为对整个语法规则的解析。<\/p><h2>课堂讨论<\/h2><p>1.在你过往的项目经历或阅读源码的时候，有没有用到或者见过解释器模式呢？<br>\n2.在告警规则解析的例子中，如果我们要在表达式中支持括号“（）”，那如何对代码进行重构呢？你可以把它当作练习，试着编写一下代码。<\/p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":36,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/04\/f9\/0413f0c64e70074f61d0e2f2163924f9.mp3","id":225904,"had_viewed":false,"article_title":"72 | 解释器模式：如何设计实现一个自定义接口告警规则功能？","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"解释器模式代码实现的核心思想，就是将语法解析的工作拆分到各个小类中，以此来避免大而全的解析类。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/e7\/2d\/e714b007f0f8b26912d28e5d1ac2d12d.jpeg","column_sale_type":0,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"10","s":"00","h":"00"},"video_time":"","audio_title":"4.16 王争 音频-72_01","audio_md5":"0413f0c64e70074f61d0e2f2163924f9","video_size":0,"text_read_percent":0,"comment_count":33,"cid":250,"article_sharetitle":"如何设计实现一个自定义接口告警规则功能？","column_is_onboard":true,"article_cshort":"<p>上一节课，我们学习了命令模式。命令模式将请求封装成对象，方便作为函数参数传递和赋值给变量。它主要的应用场景是给命令的执行附加功能，换句话说，就是控制命令的执行，比如，排队、异步、延迟执行命令、给命令执行记录日志、撤销重做命令等等。总体上来讲，命令模式的应用范围并不广。<\/p><p>今天，我们来学习解释器模式，它用来描述如何构建一个简单的“语言”解释器。比起命令模式，解释器模式更加小众，只在一些特定的领域会被用到，比如编译器、规则引擎、正则表达式。所以，解释器模式也不是我们学习的重点，你稍微了解一下就可以了。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>解释器模式的原理和实现<\/h2><p>解释器模式的英文翻译是Interpreter Design Pattern。在GoF的《设计模式》一书中，它是这样定义的：<\/p><blockquote>\n<p>Interpreter pattern is used to defines a grammatical representation for a language and provides an interpreter to deal with this grammar.<\/p>\n<\/blockquote><p>翻译成中文就是：解释器模式为某个语言定义它的语法（或者叫文法）表示，并定义一个解释器用来处理这个语法。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1587052800,"score":"91587052800"},"code":0}