{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":0,"audio_size":13393276,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/7a\/9b\/7a896c9de994b811f465f5d1e9ba029b.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/e6\/05\/e60f6e929d047f92e7877bb5aea82805\/ld\/ld.m3u8","chapter_id":"1097","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":11},"neighbors":{"left":{"article_title":"17 | 理论三：里式替换（LSP）跟多态有何区别？哪些代码违背了LSP？","id":177110},"right":{"article_title":"19 | 理论五：控制反转、依赖反转、依赖注入，这三者有何区别和联系？","id":177444}},"audio_time":"00:13:56","video_height":0,"rate_percent":0,"article_content":"<p>上几节课中，我们学习了SOLID原则中的单一职责原则、开闭原则和里式替换原则，今天我们学习第四个原则，接口隔离原则。它对应SOLID中的英文字母“I”。对于这个原则，最关键就是理解其中“接口”的含义。那针对“接口”，不同的理解方式，对应在原则上也有不同的解读方式。除此之外，接口隔离原则跟我们之前讲到的单一职责原则还有点儿类似，所以今天我也会具体讲一下它们之间的区别和联系。<\/p><p>话不多说，现在就让我们正式开始今天的学习吧！<\/p><h2>如何理解“接口隔离原则”？<\/h2><p>接口隔离原则的英文翻译是“ Interface Segregation Principle”，缩写为ISP。Robert Martin在SOLID原则中是这样定义它的：“Clients should not be forced to depend upon interfaces that they do not use。”直译成中文的话就是：客户端不应该被强迫依赖它不需要的接口。其中的“客户端”，可以理解为接口的调用者或者使用者。<\/p><p>实际上，“接口”这个名词可以用在很多场合中。生活中我们可以用它来指插座接口等。在软件开发中，我们既可以把它看作一组抽象的约定，也可以具体指系统与系统之间的API接口，还可以特指面向对象编程语言中的接口等。<\/p><!-- [[[read_end]]] --><p>前面我提到，理解接口隔离原则的关键，就是理解其中的“接口”二字。在这条原则中，我们可以把“接口”理解为下面三种东西：<\/p><ul>\n<li>一组API接口集合<\/li>\n<li>单个API接口或函数<\/li>\n<li>OOP中的接口概念<\/li>\n<\/ul><p>接下来，我就按照这三种理解方式来详细讲一下，在不同的场景下，这条原则具体是如何解读和应用的。<\/p><h2>把“接口”理解为一组API接口集合<\/h2><p>我们还是结合一个例子来讲解。微服务用户系统提供了一组跟用户相关的API给其他系统使用，比如：注册、登录、获取用户信息等。具体代码如下所示：<\/p><pre><code>public interface UserService {\n  boolean register(String cellphone, String password);\n  boolean login(String cellphone, String password);\n  UserInfo getUserInfoById(long id);\n  UserInfo getUserInfoByCellphone(String cellphone);\n}\n\npublic class UserServiceImpl implements UserService {\n  \/\/...\n}\n<\/code><\/pre><p>现在，我们的后台管理系统要实现删除用户的功能，希望用户系统提供一个删除用户的接口。这个时候我们该如何来做呢？你可能会说，这不是很简单吗，我只需要在UserService中新添加一个deleteUserByCellphone()或deleteUserById()接口就可以了。这个方法可以解决问题，但是也隐藏了一些安全隐患。<\/p><p>删除用户是一个非常慎重的操作，我们只希望通过后台管理系统来执行，所以这个接口只限于给后台管理系统使用。如果我们把它放到UserService中，那所有使用到UserService的系统，都可以调用这个接口。不加限制地被其他业务系统调用，就有可能导致误删用户。<\/p><p>当然，最好的解决方案是从架构设计的层面，通过接口鉴权的方式来限制接口的调用。不过，如果暂时没有鉴权框架来支持，我们还可以从代码设计的层面，尽量避免接口被误用。我们参照接口隔离原则，调用者不应该强迫依赖它不需要的接口，将删除接口单独放到另外一个接口RestrictedUserService中，然后将RestrictedUserService只打包提供给后台管理系统来使用。具体的代码实现如下所示：<\/p><pre><code>public interface UserService {\n  boolean register(String cellphone, String password);\n  boolean login(String cellphone, String password);\n  UserInfo getUserInfoById(long id);\n  UserInfo getUserInfoByCellphone(String cellphone);\n}\n\npublic interface RestrictedUserService {\n  boolean deleteUserByCellphone(String cellphone);\n  boolean deleteUserById(long id);\n}\n\npublic class UserServiceImpl implements UserService, RestrictedUserService {\n  \/\/ ...省略实现代码...\n}\n<\/code><\/pre><p>在刚刚的这个例子中，我们把接口隔离原则中的接口，理解为一组接口集合，它可以是某个微服务的接口，也可以是某个类库的接口等等。在设计微服务或者类库接口的时候，如果部分接口只被部分调用者使用，那我们就需要将这部分接口隔离出来，单独给对应的调用者使用，而不是强迫其他调用者也依赖这部分不会被用到的接口。<\/p><h2>把“接口”理解为单个API接口或函数<\/h2><p>现在我们再换一种理解方式，把接口理解为单个接口或函数（以下为了方便讲解，我都简称为“函数”）。那接口隔离原则就可以理解为：函数的设计要功能单一，不要将多个不同的功能逻辑在一个函数中实现。接下来，我们还是通过一个例子来解释一下。<\/p><pre><code>public class Statistics {\n  private Long max;\n  private Long min;\n  private Long average;\n  private Long sum;\n  private Long percentile99;\n  private Long percentile999;\n  \/\/...省略constructor\/getter\/setter等方法...\n}\n\npublic Statistics count(Collection&lt;Long&gt; dataSet) {\n  Statistics statistics = new Statistics();\n  \/\/...省略计算逻辑...\n  return statistics;\n}\n<\/code><\/pre><p>在上面的代码中，count()函数的功能不够单一，包含很多不同的统计功能，比如，求最大值、最小值、平均值等等。按照接口隔离原则，我们应该把count()函数拆成几个更小粒度的函数，每个函数负责一个独立的统计功能。拆分之后的代码如下所示：<\/p><pre><code>public Long max(Collection&lt;Long&gt; dataSet) { \/\/... }\npublic Long min(Collection&lt;Long&gt; dataSet) { \/\/... } \npublic Long average(Colletion&lt;Long&gt; dataSet) { \/\/... }\n\/\/ ...省略其他统计函数...\n<\/code><\/pre><p>不过，你可能会说，在某种意义上讲，count()函数也不能算是职责不够单一，毕竟它做的事情只跟统计相关。我们在讲单一职责原则的时候，也提到过类似的问题。实际上，判定功能是否单一，除了很强的主观性，还需要结合具体的场景。<\/p><p>如果在项目中，对每个统计需求，Statistics定义的那几个统计信息都有涉及，那count()函数的设计就是合理的。相反，如果每个统计需求只涉及Statistics罗列的统计信息中一部分，比如，有的只需要用到max、min、average这三类统计信息，有的只需要用到average、sum。而count()函数每次都会把所有的统计信息计算一遍，就会做很多无用功，势必影响代码的性能，特别是在需要统计的数据量很大的时候。所以，在这个应用场景下，count()函数的设计就有点不合理了，我们应该按照第二种设计思路，将其拆分成粒度更细的多个统计函数。<\/p><p>不过，你应该已经发现，接口隔离原则跟单一职责原则有点类似，不过稍微还是有点区别。单一职责原则针对的是模块、类、接口的设计。而接口隔离原则相对于单一职责原则，一方面它更侧重于接口的设计，另一方面它的思考的角度不同。它提供了一种判断接口是否职责单一的标准：通过调用者如何使用接口来间接地判定。如果调用者只使用部分接口或接口的部分功能，那接口的设计就不够职责单一。<\/p><h2>把“接口”理解为OOP中的接口概念<\/h2><p>除了刚讲过的两种理解方式，我们还可以把“接口”理解为OOP中的接口概念，比如Java中的interface。我还是通过一个例子来给你解释。<\/p><p>假设我们的项目中用到了三个外部系统：Redis、MySQL、Kafka。每个系统都对应一系列配置信息，比如地址、端口、访问超时时间等。为了在内存中存储这些配置信息，供项目中的其他模块来使用，我们分别设计实现了三个Configuration类：RedisConfig、MysqlConfig、KafkaConfig。具体的代码实现如下所示。注意，这里我只给出了RedisConfig的代码实现，另外两个都是类似的，我这里就不贴了。<\/p><pre><code>public class RedisConfig {\n    private ConfigSource configSource; \/\/配置中心（比如zookeeper）\n    private String address;\n    private int timeout;\n    private int maxTotal;\n    \/\/省略其他配置: maxWaitMillis,maxIdle,minIdle...\n\n    public RedisConfig(ConfigSource configSource) {\n        this.configSource = configSource;\n    }\n\n    public String getAddress() {\n        return this.address;\n    }\n    \/\/...省略其他get()、init()方法...\n\n    public void update() {\n      \/\/从configSource加载配置到address\/timeout\/maxTotal...\n    }\n}\n\npublic class KafkaConfig { \/\/...省略... }\npublic class MysqlConfig { \/\/...省略... }\n<\/code><\/pre><p>现在，我们有一个新的功能需求，希望支持Redis和Kafka配置信息的热更新。所谓“热更新（hot update）”就是，如果在配置中心中更改了配置信息，我们希望在不用重启系统的情况下，能将最新的配置信息加载到内存中（也就是RedisConfig、KafkaConfig类中）。但是，因为某些原因，我们并不希望对MySQL的配置信息进行热更新。<\/p><p>为了实现这样一个功能需求，我们设计实现了一个ScheduledUpdater类，以固定时间频率（periodInSeconds）来调用RedisConfig、KafkaConfig的update()方法更新配置信息。具体的代码实现如下所示：<\/p><pre><code>public interface Updater {\n  void update();\n}\n\npublic class RedisConfig implemets Updater {\n  \/\/...省略其他属性和方法...\n  @Override\n  public void update() { \/\/... }\n}\n\npublic class KafkaConfig implements Updater {\n  \/\/...省略其他属性和方法...\n  @Override\n  public void update() { \/\/... }\n}\n\npublic class MysqlConfig { \/\/...省略其他属性和方法... }\n\npublic class ScheduledUpdater {\n    private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();;\n    private long initialDelayInSeconds;\n    private long periodInSeconds;\n    private Updater updater;\n\n    public ScheduleUpdater(Updater updater, long initialDelayInSeconds, long periodInSeconds) {\n        this.updater = updater;\n        this.initialDelayInSeconds = initialDelayInSeconds;\n        this.periodInSeconds = periodInSeconds;\n    }\n\n    public void run() {\n        executor.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                updater.update();\n            }\n        }, this.initialDelayInSeconds, this.periodInSeconds, TimeUnit.SECONDS);\n    }\n}\n\npublic class Application {\n  ConfigSource configSource = new ZookeeperConfigSource(\/*省略参数*\/);\n  public static final RedisConfig redisConfig = new RedisConfig(configSource);\n  public static final KafkaConfig kafkaConfig = new KakfaConfig(configSource);\n  public static final MySqlConfig mysqlConfig = new MysqlConfig(configSource);\n\n  public static void main(String[] args) {\n    ScheduledUpdater redisConfigUpdater = new ScheduledUpdater(redisConfig, 300, 300);\n    redisConfigUpdater.run();\n    \n    ScheduledUpdater kafkaConfigUpdater = new ScheduledUpdater(kafkaConfig, 60, 60);\n    redisConfigUpdater.run();\n  }\n}\n<\/code><\/pre><p>刚刚的热更新的需求我们已经搞定了。现在，我们又有了一个新的监控功能需求。通过命令行来查看Zookeeper中的配置信息是比较麻烦的。所以，我们希望能有一种更加方便的配置信息查看方式。<\/p><p>我们可以在项目中开发一个内嵌的SimpleHttpServer，输出项目的配置信息到一个固定的HTTP地址，比如：<a href=\"http:\/\/127.0.0.1:2389\/config\">http:\/\/127.0.0.1:2389\/config<\/a> 。我们只需要在浏览器中输入这个地址，就可以显示出系统的配置信息。不过，出于某些原因，我们只想暴露MySQL和Redis的配置信息，不想暴露Kafka的配置信息。<\/p><p>为了实现这样一个功能，我们还需要对上面的代码做进一步改造。改造之后的代码如下所示：<\/p><pre><code>public interface Updater {\n  void update();\n}\n\npublic interface Viewer {\n  String outputInPlainText();\n  Map&lt;String, String&gt; output();\n}\n\npublic class RedisConfig implemets Updater, Viewer {\n  \/\/...省略其他属性和方法...\n  @Override\n  public void update() { \/\/... }\n  @Override\n  public String outputInPlainText() { \/\/... }\n  @Override\n  public Map&lt;String, String&gt; output() { \/\/...}\n}\n\npublic class KafkaConfig implements Updater {\n  \/\/...省略其他属性和方法...\n  @Override\n  public void update() { \/\/... }\n}\n\npublic class MysqlConfig implements Viewer {\n  \/\/...省略其他属性和方法...\n  @Override\n  public String outputInPlainText() { \/\/... }\n  @Override\n  public Map&lt;String, String&gt; output() { \/\/...}\n}\n\npublic class SimpleHttpServer {\n  private String host;\n  private int port;\n  private Map&lt;String, List&lt;Viewer&gt;&gt; viewers = new HashMap&lt;&gt;();\n  \n  public SimpleHttpServer(String host, int port) {\/\/...}\n  \n  public void addViewers(String urlDirectory, Viewer viewer) {\n    if (!viewers.containsKey(urlDirectory)) {\n      viewers.put(urlDirectory, new ArrayList&lt;Viewer&gt;());\n    }\n    this.viewers.get(urlDirectory).add(viewer);\n  }\n  \n  public void run() { \/\/... }\n}\n\npublic class Application {\n    ConfigSource configSource = new ZookeeperConfigSource();\n    public static final RedisConfig redisConfig = new RedisConfig(configSource);\n    public static final KafkaConfig kafkaConfig = new KakfaConfig(configSource);\n    public static final MySqlConfig mysqlConfig = new MySqlConfig(configSource);\n    \n    public static void main(String[] args) {\n        ScheduledUpdater redisConfigUpdater =\n            new ScheduledUpdater(redisConfig, 300, 300);\n        redisConfigUpdater.run();\n        \n        ScheduledUpdater kafkaConfigUpdater =\n            new ScheduledUpdater(kafkaConfig, 60, 60);\n        redisConfigUpdater.run();\n        \n        SimpleHttpServer simpleHttpServer = new SimpleHttpServer(“127.0.0.1”, 2389);\n        simpleHttpServer.addViewer(&quot;\/config&quot;, redisConfig);\n        simpleHttpServer.addViewer(&quot;\/config&quot;, mysqlConfig);\n        simpleHttpServer.run();\n    }\n}\n<\/code><\/pre><p>至此，热更新和监控的需求我们就都实现了。我们来回顾一下这个例子的设计思想。<\/p><p>我们设计了两个功能非常单一的接口：Updater和Viewer。ScheduledUpdater只依赖Updater这个跟热更新相关的接口，不需要被强迫去依赖不需要的Viewer接口，满足接口隔离原则。同理，SimpleHttpServer只依赖跟查看信息相关的Viewer接口，不依赖不需要的Updater接口，也满足接口隔离原则。<\/p><p>你可能会说，如果我们不遵守接口隔离原则，不设计Updater和Viewer两个小接口，而是设计一个大而全的Config接口，让RedisConfig、KafkaConfig、MysqlConfig都实现这个Config接口，并且将原来传递给ScheduledUpdater的Updater和传递给SimpleHttpServer的Viewer，都替换为Config，那会有什么问题呢？我们先来看一下，按照这个思路来实现的代码是什么样的。<\/p><pre><code>public interface Config {\n  void update();\n  String outputInPlainText();\n  Map&lt;String, String&gt; output();\n}\n\npublic class RedisConfig implements Config {\n  \/\/...需要实现Config的三个接口update\/outputIn...\/output\n}\n\npublic class KafkaConfig implements Config {\n  \/\/...需要实现Config的三个接口update\/outputIn...\/output\n}\n\npublic class MysqlConfig implements Config {\n  \/\/...需要实现Config的三个接口update\/outputIn...\/output\n}\n\npublic class ScheduledUpdater {\n  \/\/...省略其他属性和方法..\n  private Config config;\n\n  public ScheduleUpdater(Config config, long initialDelayInSeconds, long periodInSeconds) {\n      this.config = config;\n      \/\/...\n  }\n  \/\/...\n}\n\npublic class SimpleHttpServer {\n  private String host;\n  private int port;\n  private Map&lt;String, List&lt;Config&gt;&gt; viewers = new HashMap&lt;&gt;();\n \n  public SimpleHttpServer(String host, int port) {\/\/...}\n  \n  public void addViewer(String urlDirectory, Config config) {\n    if (!viewers.containsKey(urlDirectory)) {\n      viewers.put(urlDirectory, new ArrayList&lt;Config&gt;());\n    }\n    viewers.get(urlDirectory).add(config);\n  }\n  \n  public void run() { \/\/... }\n}\n<\/code><\/pre><p>这样的设计思路也是能工作的，但是对比前后两个设计思路，在同样的代码量、实现复杂度、同等可读性的情况下，第一种设计思路显然要比第二种好很多。为什么这么说呢？主要有两点原因。<\/p><p><strong>首先，第一种设计思路更加灵活、易扩展、易复用。<\/strong>因为Updater、Viewer职责更加单一，单一就意味了通用、复用性好。比如，我们现在又有一个新的需求，开发一个Metrics性能统计模块，并且希望将Metrics也通过SimpleHttpServer显示在网页上，以方便查看。这个时候，尽管Metrics跟RedisConfig等没有任何关系，但我们仍然可以让Metrics类实现非常通用的Viewer接口，复用SimpleHttpServer的代码实现。具体的代码如下所示：<\/p><pre><code>public class ApiMetrics implements Viewer {\/\/...}\npublic class DbMetrics implements Viewer {\/\/...}\n\npublic class Application {\n    ConfigSource configSource = new ZookeeperConfigSource();\n    public static final RedisConfig redisConfig = new RedisConfig(configSource);\n    public static final KafkaConfig kafkaConfig = new KakfaConfig(configSource);\n    public static final MySqlConfig mySqlConfig = new MySqlConfig(configSource);\n    public static final ApiMetrics apiMetrics = new ApiMetrics();\n    public static final DbMetrics dbMetrics = new DbMetrics();\n    \n    public static void main(String[] args) {\n        SimpleHttpServer simpleHttpServer = new SimpleHttpServer(“127.0.0.1”, 2389);\n        simpleHttpServer.addViewer(&quot;\/config&quot;, redisConfig);\n        simpleHttpServer.addViewer(&quot;\/config&quot;, mySqlConfig);\n        simpleHttpServer.addViewer(&quot;\/metrics&quot;, apiMetrics);\n        simpleHttpServer.addViewer(&quot;\/metrics&quot;, dbMetrics);\n        simpleHttpServer.run();\n    }\n}\n<\/code><\/pre><p><strong>其次，第二种设计思路在代码实现上做了一些无用功。<\/strong>因为Config接口中包含两类不相关的接口，一类是update()，一类是output()和outputInPlainText()。理论上，KafkaConfig只需要实现update()接口，并不需要实现output()相关的接口。同理，MysqlConfig只需要实现output()相关接口，并需要实现update()接口。但第二种设计思路要求RedisConfig、KafkaConfig、MySqlConfig必须同时实现Config的所有接口函数（update、output、outputInPlainText）。除此之外，如果我们要往Config中继续添加一个新的接口，那所有的实现类都要改动。相反，如果我们的接口粒度比较小，那涉及改动的类就比较少。<\/p><h2>重点回顾<\/h2><p>今天的内容到此就讲完了。我们一块来总结回顾一下，你需要掌握的重点内容。<\/p><p><strong>1.如何理解“接口隔离原则”？<\/strong><\/p><p>理解“接口隔离原则”的重点是理解其中的“接口”二字。这里有三种不同的理解。<\/p><p>如果把“接口”理解为一组接口集合，可以是某个微服务的接口，也可以是某个类库的接口等。如果部分接口只被部分调用者使用，我们就需要将这部分接口隔离出来，单独给这部分调用者使用，而不强迫其他调用者也依赖这部分不会被用到的接口。<\/p><p>如果把“接口”理解为单个API接口或函数，部分调用者只需要函数中的部分功能，那我们就需要把函数拆分成粒度更细的多个函数，让调用者只依赖它需要的那个细粒度函数。<\/p><p>如果把“接口”理解为OOP中的接口，也可以理解为面向对象编程语言中的接口语法。那接口的设计要尽量单一，不要让接口的实现类和调用者，依赖不需要的接口函数。<\/p><p><strong>2.接口隔离原则与单一职责原则的区别<\/strong><\/p><p>单一职责原则针对的是模块、类、接口的设计。接口隔离原则相对于单一职责原则，一方面更侧重于接口的设计，另一方面它的思考角度也是不同的。接口隔离原则提供了一种判断接口的职责是否单一的标准：通过调用者如何使用接口来间接地判定。如果调用者只使用部分接口或接口的部分功能，那接口的设计就不够职责单一。<\/p><h2>课堂讨论<\/h2><p>今天课堂讨论的话题是这样的：<\/p><p>java.util.concurrent并发包提供了AtomicInteger这样一个原子类，其中有一个函数getAndIncrement()是这样定义的：给整数增加一，并且返回未増之前的值。我的问题是，这个函数的设计是否符合单一职责原则和接口隔离原则？为什么？<\/p><pre><code>\/**\n * Atomically increments by one the current value.\n * @return the previous value\n *\/\npublic final int getAndIncrement() {\/\/...}\n<\/code><\/pre><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":116,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/e6\/05\/e60f6e929d047f92e7877bb5aea82805.mp3","id":177442,"had_viewed":false,"article_title":"18 | 理论四：接口隔离原则有哪三种应用？原则中的“接口”该如何理解？","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"接口隔离原则提供了一种判断接口的职责是否单一的标准：通过调用者如何使用接口来间接地判定。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/fb\/68\/fb7a5d4e9e12f4ba80237374ccb52d68.jpeg","column_sale_type":0,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"13","s":"56","h":"00"},"video_time":"","audio_title":"王争18修改版","audio_md5":"e60f6e929d047f92e7877bb5aea82805","video_size":0,"text_read_percent":0,"comment_count":139,"cid":250,"article_sharetitle":"接口隔离原则有哪三种应用？原则中的“接口”该如何理解？","column_is_onboard":true,"article_cshort":"<p>上几节课中，我们学习了SOLID原则中的单一职责原则、开闭原则和里式替换原则，今天我们学习第四个原则，接口隔离原则。它对应SOLID中的英文字母“I”。对于这个原则，最关键就是理解其中“接口”的含义。那针对“接口”，不同的理解方式，对应在原则上也有不同的解读方式。除此之外，接口隔离原则跟我们之前讲到的单一职责原则还有点儿类似，所以今天我也会具体讲一下它们之间的区别和联系。<\/p><p>话不多说，现在就让我们正式开始今天的学习吧！<\/p><h2>如何理解“接口隔离原则”？<\/h2><p>接口隔离原则的英文翻译是“ Interface Segregation Principle”，缩写为ISP。Robert Martin在SOLID原则中是这样定义它的：“Clients should not be forced to depend upon interfaces that they do not use。”直译成中文的话就是：客户端不应该被强迫依赖它不需要的接口。其中的“客户端”，可以理解为接口的调用者或者使用者。<\/p><p>实际上，“接口”这个名词可以用在很多场合中。生活中我们可以用它来指插座接口等。在软件开发中，我们既可以把它看作一组抽象的约定，也可以具体指系统与系统之间的API接口，还可以特指面向对象编程语言中的接口等。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1576166400,"score":"41576166400"},"code":0}