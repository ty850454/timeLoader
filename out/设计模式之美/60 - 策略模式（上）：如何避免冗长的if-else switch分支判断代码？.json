{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":2,"audio_size":7311610,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/6c\/16\/6c337ca447fe82f15bbbdadb35184b16.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/ea\/bc\/ea222c6642f138d498bb397f9a0cc1bc\/ld\/ld.m3u8","chapter_id":"1289","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":20},"neighbors":{"left":{"article_title":"59 | 模板模式（下）：模板模式与Callback回调函数有何区别和联系？","id":212802},"right":{"article_title":"61 | 策略模式（下）：如何实现一个支持给不同大小文件排序的小程序？","id":215132}},"audio_time":"00:07:36","video_height":0,"rate_percent":0,"article_content":"<p>上两节课中，我们学习了模板模式。模板模式主要起到代码复用和扩展的作用。除此之外，我们还讲到了回调，它跟模板模式的作用类似，但使用起来更加灵活。它们之间的主要区别在于代码实现，模板模式基于继承来实现，回调基于组合来实现。<\/p><p>今天，我们开始学习另外一种行为型模式，策略模式。在实际的项目开发中，这个模式也比较常用。最常见的应用场景是，利用它来避免冗长的if-else或switch分支判断。不过，它的作用还不止如此。它也可以像模板模式那样，提供框架的扩展点等等。<\/p><p>对于策略模式，我们分两节课来讲解。今天，我们讲解策略模式的原理和实现，以及如何用它来避免分支判断逻辑。下一节课，我会通过一个具体的例子，来详细讲解策略模式的应用场景以及真正的设计意图。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>策略模式的原理与实现<\/h2><p>策略模式，英文全称是Strategy Design Pattern。在GoF的《设计模式》一书中，它是这样定义的：<\/p><blockquote>\n<p>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.<\/p>\n<\/blockquote><!-- [[[read_end]]] --><p>翻译成中文就是：定义一族算法类，将每个算法分别封装起来，让它们可以互相替换。策略模式可以使算法的变化独立于使用它们的客户端（这里的客户端代指使用算法的代码）。<\/p><p>我们知道，工厂模式是解耦对象的创建和使用，观察者模式是解耦观察者和被观察者。策略模式跟两者类似，也能起到解耦的作用，不过，它解耦的是策略的定义、创建、使用这三部分。接下来，我就详细讲讲一个完整的策略模式应该包含的这三个部分。<\/p><h3>1.策略的定义<\/h3><p>策略类的定义比较简单，包含一个策略接口和一组实现这个接口的策略类。因为所有的策略类都实现相同的接口，所以，客户端代码基于接口而非实现编程，可以灵活地替换不同的策略。示例代码如下所示：<\/p><pre><code>public interface Strategy {\n  void algorithmInterface();\n}\n\npublic class ConcreteStrategyA implements Strategy {\n  @Override\n  public void  algorithmInterface() {\n    \/\/具体的算法...\n  }\n}\n\npublic class ConcreteStrategyB implements Strategy {\n  @Override\n  public void  algorithmInterface() {\n    \/\/具体的算法...\n  }\n}\n<\/code><\/pre><h3>2.策略的创建<\/h3><p>因为策略模式会包含一组策略，在使用它们的时候，一般会通过类型（type）来判断创建哪个策略来使用。为了封装创建逻辑，我们需要对客户端代码屏蔽创建细节。我们可以把根据type创建策略的逻辑抽离出来，放到工厂类中。示例代码如下所示：<\/p><pre><code>public class StrategyFactory {\n  private static final Map&lt;String, Strategy&gt; strategies = new HashMap&lt;&gt;();\n\n  static {\n    strategies.put(&quot;A&quot;, new ConcreteStrategyA());\n    strategies.put(&quot;B&quot;, new ConcreteStrategyB());\n  }\n\n  public static Strategy getStrategy(String type) {\n    if (type == null || type.isEmpty()) {\n      throw new IllegalArgumentException(&quot;type should not be empty.&quot;);\n    }\n    return strategies.get(type);\n  }\n}\n<\/code><\/pre><p>一般来讲，如果策略类是无状态的，不包含成员变量，只是纯粹的算法实现，这样的策略对象是可以被共享使用的，不需要在每次调用getStrategy()的时候，都创建一个新的策略对象。针对这种情况，我们可以使用上面这种工厂类的实现方式，事先创建好每个策略对象，缓存到工厂类中，用的时候直接返回。<\/p><p>相反，如果策略类是有状态的，根据业务场景的需要，我们希望每次从工厂方法中，获得的都是新创建的策略对象，而不是缓存好可共享的策略对象，那我们就需要按照如下方式来实现策略工厂类。<\/p><pre><code>public class StrategyFactory {\n  public static Strategy getStrategy(String type) {\n    if (type == null || type.isEmpty()) {\n      throw new IllegalArgumentException(&quot;type should not be empty.&quot;);\n    }\n\n    if (type.equals(&quot;A&quot;)) {\n      return new ConcreteStrategyA();\n    } else if (type.equals(&quot;B&quot;)) {\n      return new ConcreteStrategyB();\n    }\n\n    return null;\n  }\n}\n<\/code><\/pre><h3>3.策略的使用<\/h3><p>刚刚讲了策略的定义和创建，现在，我们再来看一下，策略的使用。<\/p><p>我们知道，策略模式包含一组可选策略，客户端代码一般如何确定使用哪个策略呢？最常见的是运行时动态确定使用哪种策略，这也是策略模式最典型的应用场景。<\/p><p>这里的“运行时动态”指的是，我们事先并不知道会使用哪个策略，而是在程序运行期间，根据配置、用户输入、计算结果等这些不确定因素，动态决定使用哪种策略。接下来，我们通过一个例子来解释一下。<\/p><pre><code>\/\/ 策略接口：EvictionStrategy\n\/\/ 策略类：LruEvictionStrategy、FifoEvictionStrategy、LfuEvictionStrategy...\n\/\/ 策略工厂：EvictionStrategyFactory\n\npublic class UserCache {\n  private Map&lt;String, User&gt; cacheData = new HashMap&lt;&gt;();\n  private EvictionStrategy eviction;\n\n  public UserCache(EvictionStrategy eviction) {\n    this.eviction = eviction;\n  }\n\n  \/\/...\n}\n\n\/\/ 运行时动态确定，根据配置文件的配置决定使用哪种策略\npublic class Application {\n  public static void main(String[] args) throws Exception {\n    EvictionStrategy evictionStrategy = null;\n    Properties props = new Properties();\n    props.load(new FileInputStream(&quot;.\/config.properties&quot;));\n    String type = props.getProperty(&quot;eviction_type&quot;);\n    evictionStrategy = EvictionStrategyFactory.getEvictionStrategy(type);\n    UserCache userCache = new UserCache(evictionStrategy);\n    \/\/...\n  }\n}\n\n\/\/ 非运行时动态确定，在代码中指定使用哪种策略\npublic class Application {\n  public static void main(String[] args) {\n    \/\/...\n    EvictionStrategy evictionStrategy = new LruEvictionStrategy();\n    UserCache userCache = new UserCache(evictionStrategy);\n    \/\/...\n  }\n}\n<\/code><\/pre><p>从上面的代码中，我们也可以看出，“非运行时动态确定”，也就是第二个Application中的使用方式，并不能发挥策略模式的优势。在这种应用场景下，策略模式实际上退化成了“面向对象的多态特性”或“基于接口而非实现编程原则”。<\/p><h2>如何利用策略模式避免分支判断？<\/h2><p>实际上，能够移除分支判断逻辑的模式不仅仅有策略模式，后面我们要讲的状态模式也可以。对于使用哪种模式，具体还要看应用场景来定。 策略模式适用于根据不同类型的动态，决定使用哪种策略这样一种应用场景。<\/p><p>我们先通过一个例子来看下，if-else或switch-case分支判断逻辑是如何产生的。具体的代码如下所示。在这个例子中，我们没有使用策略模式，而是将策略的定义、创建、使用直接耦合在一起。<\/p><pre><code>public class OrderService {\n  public double discount(Order order) {\n    double discount = 0.0;\n    OrderType type = order.getType();\n    if (type.equals(OrderType.NORMAL)) { \/\/ 普通订单\n      \/\/...省略折扣计算算法代码\n    } else if (type.equals(OrderType.GROUPON)) { \/\/ 团购订单\n      \/\/...省略折扣计算算法代码\n    } else if (type.equals(OrderType.PROMOTION)) { \/\/ 促销订单\n      \/\/...省略折扣计算算法代码\n    }\n    return discount;\n  }\n}\n<\/code><\/pre><p>如何来移除掉分支判断逻辑呢？那策略模式就派上用场了。我们使用策略模式对上面的代码重构，将不同类型订单的打折策略设计成策略类，并由工厂类来负责创建策略对象。具体的代码如下所示：<\/p><pre><code>\/\/ 策略的定义\npublic interface DiscountStrategy {\n  double calDiscount(Order order);\n}\n\/\/ 省略NormalDiscountStrategy、GrouponDiscountStrategy、PromotionDiscountStrategy类代码...\n\n\/\/ 策略的创建\npublic class DiscountStrategyFactory {\n  private static final Map&lt;OrderType, DiscountStrategy&gt; strategies = new HashMap&lt;&gt;();\n\n  static {\n    strategies.put(OrderType.NORMAL, new NormalDiscountStrategy());\n    strategies.put(OrderType.GROUPON, new GrouponDiscountStrategy());\n    strategies.put(OrderType.PROMOTION, new PromotionDiscountStrategy());\n  }\n\n  public static DiscountStrategy getDiscountStrategy(OrderType type) {\n    return strategies.get(type);\n  }\n}\n\n\/\/ 策略的使用\npublic class OrderService {\n  public double discount(Order order) {\n    OrderType type = order.getType();\n    DiscountStrategy discountStrategy = DiscountStrategyFactory.getDiscountStrategy(type);\n    return discountStrategy.calDiscount(order);\n  }\n}\n<\/code><\/pre><p>重构之后的代码就没有了if-else分支判断语句了。实际上，这得益于策略工厂类。在工厂类中，我们用Map来缓存策略，根据type直接从Map中获取对应的策略，从而避免if-else分支判断逻辑。等后面讲到使用状态模式来避免分支判断逻辑的时候，你会发现，它们使用的是同样的套路。本质上都是借助“查表法”，根据type查表（代码中的strategies就是表）替代根据type分支判断。<\/p><p>但是，如果业务场景需要每次都创建不同的策略对象，我们就要用另外一种工厂类的实现方式了。具体的代码如下所示：<\/p><pre><code>public class DiscountStrategyFactory {\n  public static DiscountStrategy getDiscountStrategy(OrderType type) {\n    if (type == null) {\n      throw new IllegalArgumentException(&quot;Type should not be null.&quot;);\n    }\n    if (type.equals(OrderType.NORMAL)) {\n      return new NormalDiscountStrategy();\n    } else if (type.equals(OrderType.GROUPON)) {\n      return new GrouponDiscountStrategy();\n    } else if (type.equals(OrderType.PROMOTION)) {\n      return new PromotionDiscountStrategy();\n    }\n    return null;\n  }\n}\n<\/code><\/pre><p>这种实现方式相当于把原来的if-else分支逻辑，从OrderService类中转移到了工厂类中，实际上并没有真正将它移除。关于这个问题如何解决，我今天先暂时卖个关子。你可以在留言区说说你的想法，我在下一节课中再讲解。<\/p><h2>重点回顾<\/h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。<\/p><p>策略模式定义一族算法类，将每个算法分别封装起来，让它们可以互相替换。策略模式可以使算法的变化独立于使用它们的客户端（这里的客户端代指使用算法的代码）。<\/p><p>策略模式用来解耦策略的定义、创建、使用。实际上，一个完整的策略模式就是由这三个部分组成的。<\/p><ul>\n<li>策略类的定义比较简单，包含一个策略接口和一组实现这个接口的策略类。<\/li>\n<li>策略的创建由工厂类来完成，封装策略创建的细节。<\/li>\n<li>策略模式包含一组策略可选，客户端代码如何选择使用哪个策略，有两种确定方法：编译时静态确定和运行时动态确定。其中，“运行时动态确定”才是策略模式最典型的应用场景。<\/li>\n<\/ul><p>除此之外，我们还可以通过策略模式来移除if-else分支判断。实际上，这得益于策略工厂类，更本质上点讲，是借助“查表法”，根据type查表替代根据type分支判断。<\/p><h2>课堂讨论<\/h2><p>今天我们讲到，在策略工厂类中，如果每次都要返回新的策略对象，我们还是需要在工厂类中编写if-else分支判断逻辑，那这个问题该如何解决呢？<\/p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":1608626057,"max_rate":27,"cur_rate":27,"is_finished":false,"total_rate":44,"learned_seconds":10},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":64,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/ea\/bc\/ea222c6642f138d498bb397f9a0cc1bc.mp3","id":214014,"had_viewed":false,"article_title":"60 | 策略模式（上）：如何避免冗长的if-else\/switch分支判断代码？","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"策略模式用来解耦策略的定义、创建、使用。实际上，一个完整的策略模式就是由这三个部分组成的。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/18\/24\/18b7d9d48757f251bfb68a527507cd24.jpeg","column_sale_type":0,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"07","s":"36","h":"00"},"video_time":"","audio_title":"3.19 王争 音频-60_01","audio_md5":"ea222c6642f138d498bb397f9a0cc1bc","video_size":0,"text_read_percent":104410321919,"comment_count":87,"cid":250,"article_sharetitle":"如何避免冗长的if-else\/switch分支判断代码？","column_is_onboard":true,"article_cshort":"<p>上两节课中，我们学习了模板模式。模板模式主要起到代码复用和扩展的作用。除此之外，我们还讲到了回调，它跟模板模式的作用类似，但使用起来更加灵活。它们之间的主要区别在于代码实现，模板模式基于继承来实现，回调基于组合来实现。<\/p><p>今天，我们开始学习另外一种行为型模式，策略模式。在实际的项目开发中，这个模式也比较常用。最常见的应用场景是，利用它来避免冗长的if-else或switch分支判断。不过，它的作用还不止如此。它也可以像模板模式那样，提供框架的扩展点等等。<\/p><p>对于策略模式，我们分两节课来讲解。今天，我们讲解策略模式的原理和实现，以及如何用它来避免分支判断逻辑。下一节课，我会通过一个具体的例子，来详细讲解策略模式的应用场景以及真正的设计意图。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>策略模式的原理与实现<\/h2><p>策略模式，英文全称是Strategy Design Pattern。在GoF的《设计模式》一书中，它是这样定义的：<\/p><blockquote>\n<p>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.<\/p>\n<\/blockquote>","video_width":0,"column_could_sub":true,"article_ctime":1584633600,"score":"91584633600"},"code":0}