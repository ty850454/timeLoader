{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":0,"audio_size":10500244,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/76\/07\/76a1a26cd8802aeae5048320623e6107.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/c5\/5f\/c5f5274e55ade88213e6c2b81815c75f\/ld\/ld.m3u8","chapter_id":"1239","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":9},"neighbors":{"left":{"article_title":"38 | 总结回顾面向对象、设计原则、编程规范、重构技巧等知识点","id":193093},"right":{"article_title":"40 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（下）","id":193555}},"audio_time":"00:12:29","video_height":0,"rate_percent":0,"article_content":"<p>在<a href=\"https:\/\/time.geekbang.org\/column\/article\/179644\">第25节<\/a>、<a href=\"https:\/\/time.geekbang.org\/column\/article\/179673\">第26节<\/a>中，我们讲了如何对一个性能计数器框架进行分析、设计与实现，并且实践了之前学过的一些设计原则和设计思想。当时我们提到，小步快跑、逐步迭代是一种非常实用的开发模式。所以，针对这个框架的开发，我们分多个版本来逐步完善。<\/p><p>在第25、26节课中，我们实现了框架的第一个版本，它只包含最基本的一些功能，在设计与实现上还有很多不足。所以，接下来，我会针对这些不足，继续迭代开发两个版本：版本2和版本3，分别对应第39节和第40节的内容。<\/p><p>在版本2中，我们会利用之前学过的重构方法，对版本1的设计与实现进行重构，解决版本1存在的设计问题，让它满足之前学过的设计原则、思想、编程规范。在版本3中，我们再对版本2进行迭代，并且完善框架的功能和非功能需求，让其满足第25节课中罗列的所有需求。<\/p><p>话不多说，让我们正式开始版本2的设计与实现吧！<\/p><h2>回顾版本1的设计与实现<\/h2><p>首先，让我们一块回顾一下版本1的设计与实现。当然，如果时间充足，你最好能再重新看一下第25、26节的内容。在版本1中，整个框架的代码被划分为下面这几个类。<\/p><ul>\n<li>MetricsCollector：负责打点采集原始数据，包括记录每次接口请求的响应时间和请求时间戳，并调用MetricsStorage提供的接口来存储这些原始数据。<\/li>\n<li>MetricsStorage和RedisMetricsStorage：负责原始数据的存储和读取。<\/li>\n<li>Aggregator：是一个工具类，负责各种统计数据的计算，比如响应时间的最大值、最小值、平均值、百分位值、接口访问次数、tps。<\/li>\n<li>ConsoleReporter和EmailReporter：相当于一个上帝类（God Class），定时根据给定的时间区间，从数据库中取出数据，借助Aggregator类完成统计工作，并将统计结果输出到相应的终端，比如命令行、邮件。<\/li>\n<\/ul><!-- [[[read_end]]] --><p>MetricCollector、MetricsStorage、RedisMetricsStorage的设计与实现比较简单，不是版本2重构的重点。今天，我们重点来看一下Aggregator和ConsoleReporter、EmailReporter这几个类。<\/p><p><strong>我们先来看一下Aggregator类存在的问题。<\/strong><\/p><p>Aggregator类里面只有一个静态函数，有50行左右的代码量，负责各种统计数据的计算。当要添加新的统计功能的时候，我们需要修改aggregate()函数代码。一旦越来越多的统计功能添加进来之后，这个函数的代码量会持续增加，可读性、可维护性就变差了。因此，我们需要在版本2中对其进行重构。<\/p><pre><code>public class Aggregator {\n  public static RequestStat aggregate(List&lt;RequestInfo&gt; requestInfos, long durationInMillis) {\n    double maxRespTime = Double.MIN_VALUE;\n    double minRespTime = Double.MAX_VALUE;\n    double avgRespTime = -1;\n    double p999RespTime = -1;\n    double p99RespTime = -1;\n    double sumRespTime = 0;\n    long count = 0;\n    for (RequestInfo requestInfo : requestInfos) {\n      ++count;\n      double respTime = requestInfo.getResponseTime();\n      if (maxRespTime &lt; respTime) {\n        maxRespTime = respTime;\n      }\n      if (minRespTime &gt; respTime) {\n        minRespTime = respTime;\n      }\n      sumRespTime += respTime;\n    }\n    if (count != 0) {\n      avgRespTime = sumRespTime \/ count;\n    }\n    long tps = (long)(count \/ durationInMillis * 1000);\n    Collections.sort(requestInfos, new Comparator&lt;RequestInfo&gt;() {\n      @Override\n      public int compare(RequestInfo o1, RequestInfo o2) {\n        double diff = o1.getResponseTime() - o2.getResponseTime();\n        if (diff &lt; 0.0) {\n          return -1;\n        } else if (diff &gt; 0.0) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n \n    if (count != 0) {\n      int idx999 = (int)(count * 0.999);\n      int idx99 = (int)(count * 0.99);\n      p999RespTime = requestInfos.get(idx999).getResponseTime();\n      p99RespTime = requestInfos.get(idx99).getResponseTime();\n    }\n    RequestStat requestStat = new RequestStat();\n    requestStat.setMaxResponseTime(maxRespTime);\n    requestStat.setMinResponseTime(minRespTime);\n    requestStat.setAvgResponseTime(avgRespTime);\n    requestStat.setP999ResponseTime(p999RespTime);\n    requestStat.setP99ResponseTime(p99RespTime);\n    requestStat.setCount(count);\n    requestStat.setTps(tps);\n    return requestStat;\n  }\n}\n\npublic class RequestStat {\n  private double maxResponseTime;\n  private double minResponseTime;\n  private double avgResponseTime;\n  private double p999ResponseTime;\n  private double p99ResponseTime;\n  private long count;\n  private long tps;\n  \/\/...省略getter\/setter方法...\n}\n<\/code><\/pre><p><strong>我们再来看一下ConsoleReporter和EmailReporter这两个类存在的问题。<\/strong><\/p><p>ConsoleReporter和EmailReporter两个类中存在代码重复问题。在这两个类中，从数据库中取数据、做统计的逻辑都是相同的，可以抽取出来复用，否则就违反了DRY原则。<\/p><p>整个类负责的事情比较多，不相干的逻辑糅合在里面，职责不够单一。特别是显示部分的代码可能会比较复杂（比如Email的显示方式），最好能将这部分显示逻辑剥离出来，设计成一个独立的类。<\/p><p>除此之外，因为代码中涉及线程操作，并且调用了Aggregator的静态函数，所以代码的可测试性也有待提高。<\/p><pre><code>public class ConsoleReporter {\n  private MetricsStorage metricsStorage;\n  private ScheduledExecutorService executor;\n\n  public ConsoleReporter(MetricsStorage metricsStorage) {\n    this.metricsStorage = metricsStorage;\n    this.executor = Executors.newSingleThreadScheduledExecutor();\n  }\n\n  public void startRepeatedReport(long periodInSeconds, long durationInSeconds) {\n    executor.scheduleAtFixedRate(new Runnable() {\n      @Override\n      public void run() {\n        long durationInMillis = durationInSeconds * 1000;\n        long endTimeInMillis = System.currentTimeMillis();\n        long startTimeInMillis = endTimeInMillis - durationInMillis;\n        Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos =\n                metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);\n        Map&lt;String, RequestStat&gt; stats = new HashMap&lt;&gt;();\n        for (Map.Entry&lt;String, List&lt;RequestInfo&gt;&gt; entry : requestInfos.entrySet()) {\n          String apiName = entry.getKey();\n          List&lt;RequestInfo&gt; requestInfosPerApi = entry.getValue();\n          RequestStat requestStat = Aggregator.aggregate(requestInfosPerApi, durationInMillis);\n          stats.put(apiName, requestStat);\n        }\n        System.out.println(&quot;Time Span: [&quot; + startTimeInMillis + &quot;, &quot; + endTimeInMillis + &quot;]&quot;);\n        Gson gson = new Gson();\n        System.out.println(gson.toJson(stats));\n      }\n    }, 0, periodInSeconds, TimeUnit.SECONDS);\n  }\n\n}\n\npublic class EmailReporter {\n  private static final Long DAY_HOURS_IN_SECONDS = 86400L;\n\n  private MetricsStorage metricsStorage;\n  private EmailSender emailSender;\n  private List&lt;String&gt; toAddresses = new ArrayList&lt;&gt;();\n\n  public EmailReporter(MetricsStorage metricsStorage) {\n    this(metricsStorage, new EmailSender(\/*省略参数*\/));\n  }\n\n  public EmailReporter(MetricsStorage metricsStorage, EmailSender emailSender) {\n    this.metricsStorage = metricsStorage;\n    this.emailSender = emailSender;\n  }\n\n  public void addToAddress(String address) {\n    toAddresses.add(address);\n  }\n\n  public void startDailyReport() {\n    Calendar calendar = Calendar.getInstance();\n    calendar.add(Calendar.DATE, 1);\n    calendar.set(Calendar.HOUR_OF_DAY, 0);\n    calendar.set(Calendar.MINUTE, 0);\n    calendar.set(Calendar.SECOND, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    Date firstTime = calendar.getTime(); \n    Timer timer = new Timer();\n    timer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        long durationInMillis = DAY_HOURS_IN_SECONDS * 1000;\n        long endTimeInMillis = System.currentTimeMillis();\n        long startTimeInMillis = endTimeInMillis - durationInMillis;\n        Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos =\n                metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);\n        Map&lt;String, RequestStat&gt; stats = new HashMap&lt;&gt;();\n        for (Map.Entry&lt;String, List&lt;RequestInfo&gt;&gt; entry : requestInfos.entrySet()) {\n          String apiName = entry.getKey();\n          List&lt;RequestInfo&gt; requestInfosPerApi = entry.getValue();\n          RequestStat requestStat = Aggregator.aggregate(requestInfosPerApi, durationInMillis);\n          stats.put(apiName, requestStat);\n        }\n        \/\/ TODO: 格式化为html格式，并且发送邮件\n      }\n    }, firstTime, DAY_HOURS_IN_SECONDS * 1000);\n  }\n\n}\n<\/code><\/pre><h2>针对版本1的问题进行重构<\/h2><p>Aggregator类和ConsoleReporter、EmailReporter类主要负责统计显示的工作。在第26节中，我们提到，如果我们把统计显示所要完成的功能逻辑细分一下，主要包含下面4点：<\/p><ol>\n<li>根据给定的时间区间，从数据库中拉取数据；<\/li>\n<li>根据原始数据，计算得到统计数据；<\/li>\n<li>将统计数据显示到终端（命令行或邮件）；<\/li>\n<li>定时触发以上三个过程的执行。<\/li>\n<\/ol><p>之前的划分方法是将所有的逻辑都放到ConsoleReporter和EmailReporter这两个上帝类中，而Aggregator只是一个包含静态方法的工具类。这样的划分方法存在前面提到的一些问题，我们需要对其进行重新划分。<\/p><p>面向对象设计中的最后一步是组装类并提供执行入口，所以，组装前三部分逻辑的上帝类是必须要有的。我们可以将上帝类做的很轻量级，把核心逻辑都剥离出去，形成独立的类，上帝类只负责组装类和串联执行流程。这样做的好处是，代码结构更加清晰，底层核心逻辑更容易被复用。按照这个设计思路，具体的重构工作包含以下4个方面。<\/p><ul>\n<li>第1个逻辑：根据给定时间区间，从数据库中拉取数据。这部分逻辑已经被封装在MetricsStorage类中了，所以这部分不需要处理。<\/li>\n<li>第2个逻辑：根据原始数据，计算得到统计数据。我们可以将这部分逻辑移动到Aggregator类中。这样Aggregator类就不仅仅是只包含统计方法的工具类了。按照这个思路，重构之后的代码如下所示：<\/li>\n<\/ul><pre><code>public class Aggregator {\n  public Map&lt;String, RequestStat&gt; aggregate(\n          Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos, long durationInMillis) {\n    Map&lt;String, RequestStat&gt; requestStats = new HashMap&lt;&gt;();\n    for (Map.Entry&lt;String, List&lt;RequestInfo&gt;&gt; entry : requestInfos.entrySet()) {\n      String apiName = entry.getKey();\n      List&lt;RequestInfo&gt; requestInfosPerApi = entry.getValue();\n      RequestStat requestStat = doAggregate(requestInfosPerApi, durationInMillis);\n      requestStats.put(apiName, requestStat);\n    }\n    return requestStats;\n  }\n\n  private RequestStat doAggregate(List&lt;RequestInfo&gt; requestInfos, long durationInMillis) {\n    List&lt;Double&gt; respTimes = new ArrayList&lt;&gt;();\n    for (RequestInfo requestInfo : requestInfos) {\n      double respTime = requestInfo.getResponseTime();\n      respTimes.add(respTime);\n    }\n\n    RequestStat requestStat = new RequestStat();\n    requestStat.setMaxResponseTime(max(respTimes));\n    requestStat.setMinResponseTime(min(respTimes));\n    requestStat.setAvgResponseTime(avg(respTimes));\n    requestStat.setP999ResponseTime(percentile999(respTimes));\n    requestStat.setP99ResponseTime(percentile99(respTimes));\n    requestStat.setCount(respTimes.size());\n    requestStat.setTps((long) tps(respTimes.size(), durationInMillis\/1000));\n    return requestStat;\n  }\n\n  \/\/ 以下的函数的代码实现均省略...\n  private double max(List&lt;Double&gt; dataset) {}\n  private double min(List&lt;Double&gt; dataset) {}\n  private double avg(List&lt;Double&gt; dataset) {}\n  private double tps(int count, double duration) {}\n  private double percentile999(List&lt;Double&gt; dataset) {}\n  private double percentile99(List&lt;Double&gt; dataset) {}\n  private double percentile(List&lt;Double&gt; dataset, double ratio) {}\n}\n<\/code><\/pre><ul>\n<li>第3个逻辑：将统计数据显示到终端。我们将这部分逻辑剥离出来，设计成两个类：ConsoleViewer类和EmailViewer类，分别负责将统计结果显示到命令行和邮件中。具体的代码实现如下所示：<\/li>\n<\/ul><pre><code>public interface StatViewer {\n  void output(Map&lt;String, RequestStat&gt; requestStats, long startTimeInMillis, long endTimeInMills);\n}\n\npublic class ConsoleViewer implements StatViewer {\n  public void output(\n          Map&lt;String, RequestStat&gt; requestStats, long startTimeInMillis, long endTimeInMills) {\n    System.out.println(&quot;Time Span: [&quot; + startTimeInMillis + &quot;, &quot; + endTimeInMills + &quot;]&quot;);\n    Gson gson = new Gson();\n    System.out.println(gson.toJson(requestStats));\n  }\n}\n\npublic class EmailViewer implements StatViewer {\n  private EmailSender emailSender;\n  private List&lt;String&gt; toAddresses = new ArrayList&lt;&gt;();\n\n  public EmailViewer() {\n    this.emailSender = new EmailSender(\/*省略参数*\/);\n  }\n\n  public EmailViewer(EmailSender emailSender) {\n    this.emailSender = emailSender;\n  }\n\n  public void addToAddress(String address) {\n    toAddresses.add(address);\n  }\n\n  public void output(\n          Map&lt;String, RequestStat&gt; requestStats, long startTimeInMillis, long endTimeInMills) {\n    \/\/ format the requestStats to HTML style.\n    \/\/ send it to email toAddresses.\n  }\n}\n<\/code><\/pre><ul>\n<li>第4个逻辑：组装类并定时触发执行统计显示。在将核心逻辑剥离出来之后，这个类的代码变得更加简洁、清晰，只负责组装各个类（MetricsStorage、Aggegrator、StatViewer）来完成整个工作流程。重构之后的代码如下所示：<\/li>\n<\/ul><pre><code>public class ConsoleReporter {\n  private MetricsStorage metricsStorage;\n  private Aggregator aggregator;\n  private StatViewer viewer;\n  private ScheduledExecutorService executor;\n\n  public ConsoleReporter(MetricsStorage metricsStorage, Aggregator aggregator, StatViewer viewer) {\n    this.metricsStorage = metricsStorage;\n    this.aggregator = aggregator;\n    this.viewer = viewer;\n    this.executor = Executors.newSingleThreadScheduledExecutor();\n  }\n\n  public void startRepeatedReport(long periodInSeconds, long durationInSeconds) {\n    executor.scheduleAtFixedRate(new Runnable() {\n      @Override\n      public void run() {\n        long durationInMillis = durationInSeconds * 1000;\n        long endTimeInMillis = System.currentTimeMillis();\n        long startTimeInMillis = endTimeInMillis - durationInMillis;\n        Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos =\n                metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);\n        Map&lt;String, RequestStat&gt; requestStats = aggregator.aggregate(requestInfos, durationInMillis);\n        viewer.output(requestStats, startTimeInMillis, endTimeInMillis);\n      }\n    }, 0L, periodInSeconds, TimeUnit.SECONDS);\n  }\n\n}\n\npublic class EmailReporter {\n  private static final Long DAY_HOURS_IN_SECONDS = 86400L;\n\n  private MetricsStorage metricsStorage;\n  private Aggregator aggregator;\n  private StatViewer viewer;\n\n  public EmailReporter(MetricsStorage metricsStorage, Aggregator aggregator, StatViewer viewer) {\n    this.metricsStorage = metricsStorage;\n    this.aggregator = aggregator;\n    this.viewer = viewer;\n  }\n\n  public void startDailyReport() {\n    Calendar calendar = Calendar.getInstance();\n    calendar.add(Calendar.DATE, 1);\n    calendar.set(Calendar.HOUR_OF_DAY, 0);\n    calendar.set(Calendar.MINUTE, 0);\n    calendar.set(Calendar.SECOND, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    Date firstTime = calendar.getTime();\n    Timer timer = new Timer();\n    timer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        long durationInMillis = DAY_HOURS_IN_SECONDS * 1000;\n        long endTimeInMillis = System.currentTimeMillis();\n        long startTimeInMillis = endTimeInMillis - durationInMillis;\n        Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos =\n                metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);\n        Map&lt;String, RequestStat&gt; stats = aggregator.aggregate(requestInfos, durationInMillis);\n        viewer.output(stats, startTimeInMillis, endTimeInMillis);\n      }\n    }, firstTime, DAY_HOURS_IN_SECONDS * 1000);\n  }\n} \n<\/code><\/pre><p>经过上面的重构之后，我们现在再来看一下，现在框架该如何来使用。<\/p><p>我们需要在应用启动的时候，创建好ConsoleReporter对象，并且调用它的startRepeatedReport()函数，来启动定时统计并输出数据到终端。同理，我们还需要创建好EmailReporter对象，并且调用它的startDailyReport()函数，来启动每日统计并输出数据到制定邮件地址。我们通过MetricsCollector类来收集接口的访问情况，这部分收集代码会跟业务逻辑代码耦合在一起，或者统一放到类似Spring AOP的切面中完成。具体的使用代码示例如下：<\/p><pre><code>public class PerfCounterTest {\n  public static void main(String[] args) {\n    MetricsStorage storage = new RedisMetricsStorage();\n    Aggregator aggregator = new Aggregator();\n\n    \/\/ 定时触发统计并将结果显示到终端\n    ConsoleViewer consoleViewer = new ConsoleViewer();\n    ConsoleReporter consoleReporter = new ConsoleReporter(storage, aggregator, consoleViewer);\n    consoleReporter.startRepeatedReport(60, 60);\n\n    \/\/ 定时触发统计并将结果输出到邮件\n    EmailViewer emailViewer = new EmailViewer();\n    emailViewer.addToAddress(&quot;wangzheng@xzg.com&quot;);\n    EmailReporter emailReporter = new EmailReporter(storage, aggregator, emailViewer);\n    emailReporter.startDailyReport();\n\n    \/\/ 收集接口访问数据\n    MetricsCollector collector = new MetricsCollector(storage);\n    collector.recordRequest(new RequestInfo(&quot;register&quot;, 123, 10234));\n    collector.recordRequest(new RequestInfo(&quot;register&quot;, 223, 11234));\n    collector.recordRequest(new RequestInfo(&quot;register&quot;, 323, 12334));\n    collector.recordRequest(new RequestInfo(&quot;login&quot;, 23, 12434));\n    collector.recordRequest(new RequestInfo(&quot;login&quot;, 1223, 14234));\n\n    try {\n      Thread.sleep(100000);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}\n<\/code><\/pre><h2>Review版本2的设计与实现<\/h2><p>现在，我们Review一下，针对版本1重构之后，版本2的设计与实现。<\/p><p>重构之后，MetricsStorage负责存储，Aggregator负责统计，StatViewer（ConsoleViewer、EmailViewer）负责显示，三个类各司其职。ConsoleReporter和EmailReporter负责组装这三个类，将获取原始数据、聚合统计、显示统计结果到终端这三个阶段的工作串联起来，定时触发执行。<\/p><p>除此之外，MetricsStorage、Aggregator、StatViewer三个类的设计也符合迪米特法则。它们只与跟自己有直接相关的数据进行交互。MetricsStorage输出的是RequestInfo相关数据。Aggregator类输入的是RequestInfo数据，输出的是RequestStat数据。StatViewer输入的是RequestStat数据。<\/p><p>针对版本1和版本2，我画了一张它们的类之间依赖关系的对比图，如下所示。从图中，我们可以看出，重构之后的代码结构更加清晰、有条理。这也印证了之前提到的：面向对象设计和实现要做的事情，就是把合适的代码放到合适的类中。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/13\/34\/1303d16f75c7266cef9105f540c54834.jpg\" alt=\"\"><\/p><p>刚刚我们分析了代码的整体结构和依赖关系，我们现在再来具体看每个类的设计。<\/p><p>Aggregator类从一个只包含一个静态函数的工具类，变成了一个普通的聚合统计类。现在，我们可以通过依赖注入的方式，将其组装进ConsoleReporter和EmailReporter类中，这样就更加容易编写单元测试。<\/p><p>Aggregator类在重构前，所有的逻辑都集中在aggregate()函数内，代码行数较多，代码的可读性和可维护性较差。在重构之后，我们将每个统计逻辑拆分成独立的函数，aggregate()函数变得比较单薄，可读性提高了。尽管我们要添加新的统计功能，还是要修改aggregate()函数，但现在的aggregate()函数代码行数很少，结构非常清晰，修改起来更加容易，可维护性提高。<\/p><p>目前来看，Aggregator的设计还算合理。但是，如果随着更多的统计功能的加入，Aggregator类的代码会越来越多。这个时候，我们可以将统计函数剥离出来，设计成独立的类，以解决Aggregator类的无限膨胀问题。不过，暂时来说没有必要这么做，毕竟将每个统计函数独立成类，会增加类的个数，也会影响到代码的可读性和可维护性。<\/p><p>ConsoleReporter和EmailReporter经过重构之后，代码的重复问题变小了，但仍然没有完全解决。尽管这两个类不再调用Aggregator的静态方法，但因为涉及多线程和时间相关的计算，代码的测试性仍然不够好。这两个问题我们留在下一节课中解决，你也可以留言说说的你解决方案。<\/p><h2>重点回顾<\/h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要掌握的重点内容。<\/p><p>面向对象设计中的最后一步是组装类并提供执行入口，也就是上帝类要做的事情。这个上帝类是没办法去掉的，但我们可以将上帝类做得很轻量级，把核心逻辑都剥离出去，下沉形成独立的类。上帝类只负责组装类和串联执行流程。这样做的好处是，代码结构更加清晰，底层核心逻辑更容易被复用。<\/p><p>面向对象设计和实现要做的事情，就是把合适的代码放到合适的类中。当我们要实现某个功能的时候，不管如何设计，所需要编写的代码量基本上是一样的，唯一的区别就是如何将这些代码划分到不同的类中。不同的人有不同的划分方法，对应得到的代码结构（比如类与类之间交互等）也不尽相同。<\/p><p>好的设计一定是结构清晰、有条理、逻辑性强，看起来一目了然，读完之后常常有一种原来如此的感觉。差的设计往往逻辑、代码乱塞一通，没有什么设计思路可言，看起来莫名其妙，读完之后一头雾水。<\/p><h2>课堂讨论<\/h2><ol>\n<li>今天我们提到，重构之后的ConsoleReporter和EmailReporter仍然存在代码重复和可测试性差的问题，你可以思考一下，应该如何解决呢？<\/li>\n<li>从上面的使用示例中，我们可以看出，框架易用性有待提高：ConsoleReporter和EmailReporter的创建过程比较复杂，使用者需要正确地组装各种类才行。对于框架的易用性，你有没有什么办法改善一下呢？<\/li>\n<\/ol><p>欢迎在留言区写下你的思考和想法，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":33,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/c5\/5f\/c5f5274e55ade88213e6c2b81815c75f.mp3","id":193221,"had_viewed":false,"article_title":"39 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（上）","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"前面我们实现了框架的第一个版本，只包含最基本的一些功能。今天我针对这些不足，继续迭代开发第二个版本。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/8e\/cf\/8ecda8c065fb7cdae5856d12d80273cf.jpeg","column_sale_type":0,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"12","s":"29","h":"00"},"video_time":"","audio_title":"1.28 王争39","audio_md5":"c5f5274e55ade88213e6c2b81815c75f","video_size":0,"text_read_percent":0,"comment_count":34,"cid":250,"article_sharetitle":"运用学过的设计原则和思想改进性能计数器项目（上）","column_is_onboard":true,"article_cshort":"<p>在<a href=\"https:\/\/time.geekbang.org\/column\/article\/179644\">第25节<\/a>、<a href=\"https:\/\/time.geekbang.org\/column\/article\/179673\">第26节<\/a>中，我们讲了如何对一个性能计数器框架进行分析、设计与实现，并且实践了之前学过的一些设计原则和设计思想。当时我们提到，小步快跑、逐步迭代是一种非常实用的开发模式。所以，针对这个框架的开发，我们分多个版本来逐步完善。<\/p><p>在第25、26节课中，我们实现了框架的第一个版本，它只包含最基本的一些功能，在设计与实现上还有很多不足。所以，接下来，我会针对这些不足，继续迭代开发两个版本：版本2和版本3，分别对应第39节和第40节的内容。<\/p><p>在版本2中，我们会利用之前学过的重构方法，对版本1的设计与实现进行重构，解决版本1存在的设计问题，让它满足之前学过的设计原则、思想、编程规范。在版本3中，我们再对版本2进行迭代，并且完善框架的功能和非功能需求，让其满足第25节课中罗列的所有需求。<\/p><p>话不多说，让我们正式开始版本2的设计与实现吧！<\/p><h2>回顾版本1的设计与实现<\/h2><p>首先，让我们一块回顾一下版本1的设计与实现。当然，如果时间充足，你最好能再重新看一下第25、26节的内容。在版本1中，整个框架的代码被划分为下面这几个类。<\/p><ul>\n<li>MetricsCollector：负责打点采集原始数据，包括记录每次接口请求的响应时间和请求时间戳，并调用MetricsStorage提供的接口来存储这些原始数据。<\/li>\n<li>MetricsStorage和RedisMetricsStorage：负责原始数据的存储和读取。<\/li>\n<li>Aggregator：是一个工具类，负责各种统计数据的计算，比如响应时间的最大值、最小值、平均值、百分位值、接口访问次数、tps。<\/li>\n<li>ConsoleReporter和EmailReporter：相当于一个上帝类（God Class），定时根据给定的时间区间，从数据库中取出数据，借助Aggregator类完成统计工作，并将统计结果输出到相应的终端，比如命令行、邮件。<\/li>\n<\/ul>","video_width":0,"column_could_sub":true,"article_ctime":1580400000,"score":"61580400000"},"code":0}