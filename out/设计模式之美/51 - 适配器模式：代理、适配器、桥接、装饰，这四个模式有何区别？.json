{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":0,"audio_size":10982711,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/70\/13\/70c34a332c4ced630486798f46328e13.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/c9\/95\/c9ee024975f0ec5002007a88bd9e0795\/ld\/ld.m3u8","chapter_id":"1271","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":14},"neighbors":{"left":{"article_title":"50 | 装饰器模式：通过剖析Java IO类库源码学习装饰器模式","id":204845},"right":{"article_title":"52 | 门面模式：如何设计合理的接口粒度以兼顾接口的易用性和通用性？","id":206409}},"audio_time":"00:13:03","video_height":0,"rate_percent":0,"article_content":"<p>前面几节课我们学习了代理模式、桥接模式、装饰器模式，今天，我们再来学习一个比较常用的结构型模式：适配器模式。这个模式相对来说还是比较简单、好理解的，应用场景也很具体，总体上来讲比较好掌握。<\/p><p>关于适配器模式，今天我们主要学习它的两种实现方式，类适配器和对象适配器，以及5种常见的应用场景。同时，我还会通过剖析slf4j日志框架，来给你展示这个模式在真实项目中的应用。除此之外，在文章的最后，我还对代理、桥接、装饰器、适配器，这4种代码结构非常相似的设计模式做简单的对比，对这几节内容做一个简单的总结。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>适配器模式的原理与实现<\/h2><p><strong>适配器模式<\/strong>的英文翻译是<strong>Adapter Design Pattern<\/strong>。顾名思义，这个模式就是用来做适配的，它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。对于这个模式，有一个经常被拿来解释它的例子，就是USB转接头充当适配器，把两种不兼容的接口，通过转接变得可以一起工作。<\/p><p>原理很简单，我们再来看下它的代码实现。适配器模式有两种实现方式：类适配器和对象适配器。其中，类适配器使用继承关系来实现，对象适配器使用组合关系来实现。具体的代码实现如下所示。其中，ITarget表示要转化成的接口定义。Adaptee是一组不兼容ITarget接口定义的接口，Adaptor将Adaptee转化成一组符合ITarget接口定义的接口。<\/p><!-- [[[read_end]]] --><pre><code>\/\/ 类适配器: 基于继承\npublic interface ITarget {\n  void f1();\n  void f2();\n  void fc();\n}\n\npublic class Adaptee {\n  public void fa() { \/\/... }\n  public void fb() { \/\/... }\n  public void fc() { \/\/... }\n}\n\npublic class Adaptor extends Adaptee implements ITarget {\n  public void f1() {\n    super.fa();\n  }\n  \n  public void f2() {\n    \/\/...重新实现f2()...\n  }\n  \n  \/\/ 这里fc()不需要实现，直接继承自Adaptee，这是跟对象适配器最大的不同点\n}\n\n\/\/ 对象适配器：基于组合\npublic interface ITarget {\n  void f1();\n  void f2();\n  void fc();\n}\n\npublic class Adaptee {\n  public void fa() { \/\/... }\n  public void fb() { \/\/... }\n  public void fc() { \/\/... }\n}\n\npublic class Adaptor implements ITarget {\n  private Adaptee adaptee;\n  \n  public Adaptor(Adaptee adaptee) {\n    this.adaptee = adaptee;\n  }\n  \n  public void f1() {\n    adaptee.fa(); \/\/委托给Adaptee\n  }\n  \n  public void f2() {\n    \/\/...重新实现f2()...\n  }\n  \n  public void fc() {\n    adaptee.fc();\n  }\n}\n<\/code><\/pre><p>针对这两种实现方式，在实际的开发中，到底该如何选择使用哪一种呢？判断的标准主要有两个，一个是Adaptee接口的个数，另一个是Adaptee和ITarget的契合程度。<\/p><ul>\n<li>如果Adaptee接口并不多，那两种实现方式都可以。<\/li>\n<li>如果Adaptee接口很多，而且Adaptee和ITarget接口定义大部分都相同，那我们推荐使用类适配器，因为Adaptor复用父类Adaptee的接口，比起对象适配器的实现方式，Adaptor的代码量要少一些。<\/li>\n<li>如果Adaptee接口很多，而且Adaptee和ITarget接口定义大部分都不相同，那我们推荐使用对象适配器，因为组合结构相对于继承更加灵活。<\/li>\n<\/ul><h2>适配器模式应用场景总结<\/h2><p>原理和实现讲完了，都不复杂。我们再来看，到底什么时候会用到适配器模式呢？<\/p><p>一般来说，适配器模式可以看作一种“补偿模式”，用来补救设计上的缺陷。应用这种模式算是“无奈之举”。如果在设计初期，我们就能协调规避接口不兼容的问题，那这种模式就没有应用的机会了。<\/p><p>前面我们反复提到，适配器模式的应用场景是“接口不兼容”。那在实际的开发中，什么情况下才会出现接口不兼容呢？我建议你先自己思考一下这个问题，然后再来看我下面的总结 。<\/p><h3>1.封装有缺陷的接口设计<\/h3><p>假设我们依赖的外部系统在接口设计方面有缺陷（比如包含大量静态方法），引入之后会影响到我们自身代码的可测试性。为了隔离设计上的缺陷，我们希望对外部系统提供的接口进行二次封装，抽象出更好的接口设计，这个时候就可以使用适配器模式了。<\/p><p>具体我还是举个例子来解释一下，你直接看代码应该会更清晰。具体代码如下所示：<\/p><pre><code>public class CD { \/\/这个类来自外部sdk，我们无权修改它的代码\n  \/\/...\n  public static void staticFunction1() { \/\/... }\n  \n  public void uglyNamingFunction2() { \/\/... }\n\n  public void tooManyParamsFunction3(int paramA, int paramB, ...) { \/\/... }\n  \n   public void lowPerformanceFunction4() { \/\/... }\n}\n\n\/\/ 使用适配器模式进行重构\npublic class ITarget {\n  void function1();\n  void function2();\n  void fucntion3(ParamsWrapperDefinition paramsWrapper);\n  void function4();\n  \/\/...\n}\n\/\/ 注意：适配器类的命名不一定非得末尾带Adaptor\npublic class CDAdaptor extends CD implements ITarget {\n  \/\/...\n  public void function1() {\n     super.staticFunction1();\n  }\n  \n  public void function2() {\n    super.uglyNamingFucntion2();\n  }\n  \n  public void function3(ParamsWrapperDefinition paramsWrapper) {\n     super.tooManyParamsFunction3(paramsWrapper.getParamA(), ...);\n  }\n  \n  public void function4() {\n    \/\/...reimplement it...\n  }\n}\n<\/code><\/pre><h3>2.统一多个类的接口设计<\/h3><p>某个功能的实现依赖多个外部系统（或者说类）。通过适配器模式，将它们的接口适配为统一的接口定义，然后我们就可以使用多态的特性来复用代码逻辑。具体我还是举个例子来解释一下。<\/p><p>假设我们的系统要对用户输入的文本内容做敏感词过滤，为了提高过滤的召回率，我们引入了多款第三方敏感词过滤系统，依次对用户输入的内容进行过滤，过滤掉尽可能多的敏感词。但是，每个系统提供的过滤接口都是不同的。这就意味着我们没法复用一套逻辑来调用各个系统。这个时候，我们就可以使用适配器模式，将所有系统的接口适配为统一的接口定义，这样我们可以复用调用敏感词过滤的代码。<\/p><p>你可以配合着下面的代码示例，来理解我刚才举的这个例子。<\/p><pre><code>public class ASensitiveWordsFilter { \/\/ A敏感词过滤系统提供的接口\n  \/\/text是原始文本，函数输出用***替换敏感词之后的文本\n  public String filterSexyWords(String text) {\n    \/\/ ...\n  }\n  \n  public String filterPoliticalWords(String text) {\n    \/\/ ...\n  } \n}\n\npublic class BSensitiveWordsFilter  { \/\/ B敏感词过滤系统提供的接口\n  public String filter(String text) {\n    \/\/...\n  }\n}\n\npublic class CSensitiveWordsFilter { \/\/ C敏感词过滤系统提供的接口\n  public String filter(String text, String mask) {\n    \/\/...\n  }\n}\n\n\/\/ 未使用适配器模式之前的代码：代码的可测试性、扩展性不好\npublic class RiskManagement {\n  private ASensitiveWordsFilter aFilter = new ASensitiveWordsFilter();\n  private BSensitiveWordsFilter bFilter = new BSensitiveWordsFilter();\n  private CSensitiveWordsFilter cFilter = new CSensitiveWordsFilter();\n  \n  public String filterSensitiveWords(String text) {\n    String maskedText = aFilter.filterSexyWords(text);\n    maskedText = aFilter.filterPoliticalWords(maskedText);\n    maskedText = bFilter.filter(maskedText);\n    maskedText = cFilter.filter(maskedText, &quot;***&quot;);\n    return maskedText;\n  }\n}\n\n\/\/ 使用适配器模式进行改造\npublic interface ISensitiveWordsFilter { \/\/ 统一接口定义\n  String filter(String text);\n}\n\npublic class ASensitiveWordsFilterAdaptor implements ISensitiveWordsFilter {\n  private ASensitiveWordsFilter aFilter;\n  public String filter(String text) {\n    String maskedText = aFilter.filterSexyWords(text);\n    maskedText = aFilter.filterPoliticalWords(maskedText);\n    return maskedText;\n  }\n}\n\/\/...省略BSensitiveWordsFilterAdaptor、CSensitiveWordsFilterAdaptor...\n\n\/\/ 扩展性更好，更加符合开闭原则，如果添加一个新的敏感词过滤系统，\n\/\/ 这个类完全不需要改动；而且基于接口而非实现编程，代码的可测试性更好。\npublic class RiskManagement { \n  private List&lt;ISensitiveWordsFilter&gt; filters = new ArrayList&lt;&gt;();\n \n  public void addSensitiveWordsFilter(ISensitiveWordsFilter filter) {\n    filters.add(filter);\n  }\n  \n  public String filterSensitiveWords(String text) {\n    String maskedText = text;\n    for (ISensitiveWordsFilter filter : filters) {\n      maskedText = filter.filter(maskedText);\n    }\n    return maskedText;\n  }\n}\n<\/code><\/pre><h3>3.替换依赖的外部系统<\/h3><p>当我们把项目中依赖的一个外部系统替换为另一个外部系统的时候，利用适配器模式，可以减少对代码的改动。具体的代码示例如下所示：<\/p><pre><code>\/\/ 外部系统A\npublic interface IA {\n  \/\/...\n  void fa();\n}\npublic class A implements IA {\n  \/\/...\n  public void fa() { \/\/... }\n}\n\/\/ 在我们的项目中，外部系统A的使用示例\npublic class Demo {\n  private IA a;\n  public Demo(IA a) {\n    this.a = a;\n  }\n  \/\/...\n}\nDemo d = new Demo(new A());\n\n\/\/ 将外部系统A替换成外部系统B\npublic class BAdaptor implemnts IA {\n  private B b;\n  public BAdaptor(B b) {\n    this.b= b;\n  }\n  public void fa() {\n    \/\/...\n    b.fb();\n  }\n}\n\/\/ 借助BAdaptor，Demo的代码中，调用IA接口的地方都无需改动，\n\/\/ 只需要将BAdaptor如下注入到Demo即可。\nDemo d = new Demo(new BAdaptor(new B()));\n<\/code><\/pre><h3>4.兼容老版本接口<\/h3><p>在做版本升级的时候，对于一些要废弃的接口，我们不直接将其删除，而是暂时保留，并且标注为deprecated，并将内部实现逻辑委托为新的接口实现。这样做的好处是，让使用它的项目有个过渡期，而不是强制进行代码修改。这也可以粗略地看作适配器模式的一个应用场景。同样，我还是通过一个例子，来进一步解释一下。<\/p><p>JDK1.0中包含一个遍历集合容器的类Enumeration。JDK2.0对这个类进行了重构，将它改名为Iterator类，并且对它的代码实现做了优化。但是考虑到如果将Enumeration直接从JDK2.0中删除，那使用JDK1.0的项目如果切换到JDK2.0，代码就会编译不通过。为了避免这种情况的发生，我们必须把项目中所有使用到Enumeration的地方，都修改为使用Iterator才行。<\/p><p>单独一个项目做Enumeration到Iterator的替换，勉强还能接受。但是，使用Java开发的项目太多了，一次JDK的升级，导致所有的项目不做代码修改就会编译报错，这显然是不合理的。这就是我们经常所说的不兼容升级。为了做到兼容使用低版本JDK的老代码，我们可以暂时保留Enumeration类，并将其实现替换为直接调用Itertor。代码示例如下所示：<\/p><pre><code>public class Collections {\n  public static Emueration emumeration(final Collection c) {\n    return new Enumeration() {\n      Iterator i = c.iterator();\n      \n      public boolean hasMoreElments() {\n        return i.hashNext();\n      }\n      \n      public Object nextElement() {\n        return i.next():\n      }\n    }\n  }\n}\n<\/code><\/pre><h3>5.适配不同格式的数据<\/h3><p>前面我们讲到，适配器模式主要用于接口的适配，实际上，它还可以用在不同格式的数据之间的适配。比如，把从不同征信系统拉取的不同格式的征信数据，统一为相同的格式，以方便存储和使用。再比如，Java中的Arrays.asList()也可以看作一种数据适配器，将数组类型的数据转化为集合容器类型。<\/p><pre><code>List&lt;String&gt; stooges = Arrays.asList(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;);\n<\/code><\/pre><h2>剖析适配器模式在Java日志中的应用<\/h2><p>Java中有很多日志框架，在项目开发中，我们常常用它们来打印日志信息。其中，比较常用的有log4j、logback，以及JDK提供的JUL(java.util.logging)和Apache的JCL(Jakarta Commons Logging)等。<\/p><p>大部分日志框架都提供了相似的功能，比如按照不同级别（debug、info、warn、erro……）打印日志等，但它们却并没有实现统一的接口。这主要可能是历史的原因，它不像JDBC那样，一开始就制定了数据库操作的接口规范。<\/p><p>如果我们只是开发一个自己用的项目，那用什么日志框架都可以，log4j、logback随便选一个就好。但是，如果我们开发的是一个集成到其他系统的组件、框架、类库等，那日志框架的选择就没那么随意了。<\/p><p>比如，项目中用到的某个组件使用log4j来打印日志，而我们项目本身使用的是logback。将组件引入到项目之后，我们的项目就相当于有了两套日志打印框架。每种日志框架都有自己特有的配置方式。所以，我们要针对每种日志框架编写不同的配置文件（比如，日志存储的文件地址、打印日志的格式）。如果引入多个组件，每个组件使用的日志框架都不一样，那日志本身的管理工作就变得非常复杂。所以，为了解决这个问题，我们需要统一日志打印框架。<\/p><p>如果你是做Java开发的，那Slf4j这个\b日志框架你肯定不陌生，它相当于JDBC规范，提供了一套打印日志的统一接口规范。不过，它只定义了接口，并没有提供具体的实现，需要配合其他日志框架（log4j、logback……）来使用。<\/p><p>不仅如此，Slf4j的出现晚于JUL、JCL、log4j等日志框架，所以，这些日志框架也不可能牺牲掉版本兼容性，将接口改造成符合Slf4j接口规范。Slf4j也事先考虑到了这个问题，所以，它不仅仅提供了统一的接口定义，还提供了针对不同日志框架的适配器。对不同日志框架的接口进行二次封装，适配成统一的Slf4j接口定义。具体的代码示例如下所示：<\/p><pre><code>\/\/ slf4j统一的接口定义\npackage org.slf4j;\npublic interface Logger {\n  public boolean isTraceEnabled();\n  public void trace(String msg);\n  public void trace(String format, Object arg);\n  public void trace(String format, Object arg1, Object arg2);\n  public void trace(String format, Object[] argArray);\n  public void trace(String msg, Throwable t);\n \n  public boolean isDebugEnabled();\n  public void debug(String msg);\n  public void debug(String format, Object arg);\n  public void debug(String format, Object arg1, Object arg2)\n  public void debug(String format, Object[] argArray)\n  public void debug(String msg, Throwable t);\n\n  \/\/...省略info、warn、error等一堆接口\n}\n\n\/\/ log4j日志框架的适配器\n\/\/ Log4jLoggerAdapter实现了LocationAwareLogger接口，\n\/\/ 其中LocationAwareLogger继承自Logger接口，\n\/\/ 也就相当于Log4jLoggerAdapter实现了Logger接口。\npackage org.slf4j.impl;\npublic final class Log4jLoggerAdapter extends MarkerIgnoringBase\n  implements LocationAwareLogger, Serializable {\n  final transient org.apache.log4j.Logger logger; \/\/ log4j\n \n  public boolean isDebugEnabled() {\n    return logger.isDebugEnabled();\n  }\n \n  public void debug(String msg) {\n    logger.log(FQCN, Level.DEBUG, msg, null);\n  }\n \n  public void debug(String format, Object arg) {\n    if (logger.isDebugEnabled()) {\n      FormattingTuple ft = MessageFormatter.format(format, arg);\n      logger.log(FQCN, Level.DEBUG, ft.getMessage(), ft.getThrowable());\n    }\n  }\n \n  public void debug(String format, Object arg1, Object arg2) {\n    if (logger.isDebugEnabled()) {\n      FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);\n      logger.log(FQCN, Level.DEBUG, ft.getMessage(), ft.getThrowable());\n    }\n  }\n \n  public void debug(String format, Object[] argArray) {\n    if (logger.isDebugEnabled()) {\n      FormattingTuple ft = MessageFormatter.arrayFormat(format, argArray);\n      logger.log(FQCN, Level.DEBUG, ft.getMessage(), ft.getThrowable());\n    }\n  }\n \n  public void debug(String msg, Throwable t) {\n    logger.log(FQCN, Level.DEBUG, msg, t);\n  }\n  \/\/...省略一堆接口的实现...\n}\n<\/code><\/pre><p>所以，在开发业务系统或者开发框架、组件的时候，我们统一使用Slf4j提供的接口来编写打印日志的代码，具体使用哪种日志框架实现（log4j、logback……），是可以动态地指定的（使用Java的SPI技术，这里我不多解释，你自行研究吧），只需要将相应的SDK导入到项目中即可。<\/p><p>不过，你可能会说，如果一些老的项目没有使用Slf4j，而是直接使用比如JCL来打印日志，那如果想要替换成其他日志框架，比如log4j，该怎么办呢？实际上，Slf4j不仅仅提供了从其他日志框架到Slf4j的适配器，还提供了反向适配器，也就是从Slf4j到其他日志框架的适配。我们可以先将JCL切换为Slf4j，然后再将Slf4j切换为log4j。经过两次适配器的转换，我们就能成功将log4j切换为了logback。<\/p><h2>代理、桥接、装饰器、适配器4种设计模式的区别<\/h2><p>代理、桥接、装饰器、适配器，这4种模式是比较常用的结构型设计模式。它们的代码结构非常相似。笼统来说，它们都可以称为Wrapper模式，也就是通过Wrapper类二次封装原始类。<\/p><p>尽管代码结构相似，但这4种设计模式的用意完全不同，也就是说要解决的问题、应用场景不同，这也是它们的主要区别。这里我就简单说一下它们之间的区别。<\/p><p><strong>代理模式：<\/strong>代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能，这是它跟装饰器模式最大的不同。<\/p><p><strong>桥接模式：<\/strong>桥接模式的目的是将接口部分和实现部分分离，从而让它们可以较为容易、也相对独立地加以改变。<\/p><p><strong>装饰器模式：<\/strong>装饰者模式在不改变原始类接口的情况下，对原始类功能进行增强，并且支持多个装饰器的嵌套使用。<\/p><p><strong>适配器模式：<\/strong>适配器模式是一种事后的补救策略。适配器提供跟原始类不同的接口，而代理模式、装饰器模式提供的都是跟原始类相同的接口。<\/p><h2>重点回顾<\/h2><p>好了，今天的内容到此就讲完了。让我们一块来总结回顾一下，你需要重点掌握的内容。<\/p><p>适配器模式是用来做适配，它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。适配器模式有两种实现方式：类适配器和对象适配器。其中，类适配器使用继承关系来实现，对象适配器使用组合关系来实现。<\/p><p>一般来说，适配器模式可以看作一种“补偿模式”，用来补救设计上的缺陷。应用这种模式算是“无奈之举”，如果在设计初期，我们就能协调规避接口不兼容的问题，那这种模式就没有应用的机会了。<\/p><p>那在实际的开发中，什么情况下才会出现接口不兼容呢？我总结下了下面这样5种场景：<\/p><ul>\n<li>封装有缺陷的接口设计<\/li>\n<li>统一多个类的接口设计<\/li>\n<li>替换依赖的外部系统<\/li>\n<li>兼容老版本接口<\/li>\n<li>适配不同格式的数据<\/li>\n<\/ul><h2>课堂讨论<\/h2><p>今天我们讲到，适配器有两种实现方式：类适配器、对象适配器。那我们之前讲到的代理模式、装饰器模式，是否也同样可以有两种实现方式（类代理模式、对象代理模式，以及类装饰器模式、对象装饰器模式）呢？<\/p><p>欢迎留言和我分享你的思考，如果有收获，也欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":106,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/c9\/95\/c9ee024975f0ec5002007a88bd9e0795.mp3","id":205912,"had_viewed":false,"article_title":"51 | 适配器模式：代理、适配器、桥接、装饰，这四个模式有何区别？","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"适配器模式可以看作一种“补偿模式”，用来补救设计上的缺陷。应用这种模式算是“无奈之举”。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/c5\/48\/c5ad7499d6c0f0c7109587ea22cfb548.jpeg","column_sale_type":0,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"13","s":"03","h":"00"},"video_time":"","audio_title":"2.27 王争51","audio_md5":"c9ee024975f0ec5002007a88bd9e0795","video_size":0,"text_read_percent":0,"comment_count":58,"cid":250,"article_sharetitle":"适配器模式5种应用场景总结","column_is_onboard":true,"article_cshort":"<p>前面几节课我们学习了代理模式、桥接模式、装饰器模式，今天，我们再来学习一个比较常用的结构型模式：适配器模式。这个模式相对来说还是比较简单、好理解的，应用场景也很具体，总体上来讲比较好掌握。<\/p><p>关于适配器模式，今天我们主要学习它的两种实现方式，类适配器和对象适配器，以及5种常见的应用场景。同时，我还会通过剖析slf4j日志框架，来给你展示这个模式在真实项目中的应用。除此之外，在文章的最后，我还对代理、桥接、装饰器、适配器，这4种代码结构非常相似的设计模式做简单的对比，对这几节内容做一个简单的总结。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>适配器模式的原理与实现<\/h2><p><strong>适配器模式<\/strong>的英文翻译是<strong>Adapter Design Pattern<\/strong>。顾名思义，这个模式就是用来做适配的，它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。对于这个模式，有一个经常被拿来解释它的例子，就是USB转接头充当适配器，把两种不兼容的接口，通过转接变得可以一起工作。<\/p><p>原理很简单，我们再来看下它的代码实现。适配器模式有两种实现方式：类适配器和对象适配器。其中，类适配器使用继承关系来实现，对象适配器使用组合关系来实现。具体的代码实现如下所示。其中，ITarget表示要转化成的接口定义。Adaptee是一组不兼容ITarget接口定义的接口，Adaptor将Adaptee转化成一组符合ITarget接口定义的接口。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1582819200,"score":"81582819200"},"code":0}