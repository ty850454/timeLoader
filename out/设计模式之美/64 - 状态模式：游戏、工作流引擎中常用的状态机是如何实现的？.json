{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":0,"audio_size":9816634,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/4d\/57\/4d2c905250a96cab3f75a46b16799757.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/0a\/b6\/0a589efc563395dd1559f4bff118adb6\/ld\/ld.m3u8","chapter_id":"1289","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":12},"neighbors":{"left":{"article_title":"63 | 职责链模式（下）：框架中常用的过滤器、拦截器是如何实现的？","id":217395},"right":{"article_title":"65 | 迭代器模式（上）：相比直接遍历集合数据，使用迭代器有哪些优势？","id":219290}},"audio_time":"00:10:13","video_height":0,"rate_percent":0,"article_content":"<p>从今天起，我们开始学习状态模式。在实际的软件开发中，状态模式并不是很常用，但是在能够用到的场景里，它可以发挥很大的作用。从这一点上来看，它有点像我们之前讲到的组合模式。<\/p><p>状态模式一般用来实现状态机，而状态机常用在游戏、工作流引擎等系统开发中。不过，状态机的实现方式有多种，除了状态模式，比较常用的还有分支逻辑法和查表法。今天，我们就详细讲讲这几种实现方式，并且对比一下它们的优劣和应用场景。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>什么是有限状态机？<\/h2><p>有限状态机，英文翻译是Finite State Machine，缩写为FSM，简称为状态机。状态机有3个组成部分：状态（State）、事件（Event）、动作（Action）。其中，事件也称为转移条件（Transition Condition）。事件触发状态的转移及动作的执行。不过，动作不是必须的，也可能只转移状态，不执行任何动作。<\/p><p>对于刚刚给出的状态机的定义，我结合一个具体的例子，来进一步解释一下。<\/p><p>“超级马里奥”游戏不知道你玩过没有？在游戏中，马里奥可以变身为多种形态，比如小马里奥（Small Mario）、超级马里奥（Super Mario）、火焰马里奥（Fire Mario）、斗篷马里奥（Cape Mario）等等。在不同的游戏情节下，各个形态会互相转化，并相应的增减积分。比如，初始形态是小马里奥，吃了蘑菇之后就会变成超级马里奥，并且增加100积分。<\/p><!-- [[[read_end]]] --><p>实际上，马里奥形态的转变就是一个状态机。其中，马里奥的不同形态就是状态机中的“状态”，游戏情节（比如吃了蘑菇）就是状态机中的“事件”，加减积分就是状态机中的“动作”。比如，吃蘑菇这个事件，会触发状态的转移：从小马里奥转移到超级马里奥，以及触发动作的执行（增加100积分）。<\/p><p>为了方便接下来的讲解，我对游戏背景做了简化，只保留了部分状态和事件。简化之后的状态转移如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/5a\/6c\/5aa0310b9b3ea08794cfc2f376c8f96c.jpg\" alt=\"\"><\/p><p>我们如何编程来实现上面的状态机呢？换句话说，如何将上面的状态转移图翻译成代码呢？<\/p><p>我写了一个骨架代码，如下所示。其中，obtainMushRoom()、obtainCape()、obtainFireFlower()、meetMonster()这几个函数，能够根据当前的状态和事件，更新状态和增减积分。不过，具体的代码实现我暂时并没有给出。你可以把它当做面试题，试着补全一下，然后再来看我下面的讲解，这样你的收获会更大。<\/p><pre><code>public enum State {\n  SMALL(0),\n  SUPER(1),\n  FIRE(2),\n  CAPE(3);\n\n  private int value;\n\n  private State(int value) {\n    this.value = value;\n  }\n\n  public int getValue() {\n    return this.value;\n  }\n}\n\npublic class MarioStateMachine {\n  private int score;\n  private State currentState;\n\n  public MarioStateMachine() {\n    this.score = 0;\n    this.currentState = State.SMALL;\n  }\n\n  public void obtainMushRoom() {\n    \/\/TODO\n  }\n\n  public void obtainCape() {\n    \/\/TODO\n  }\n\n  public void obtainFireFlower() {\n    \/\/TODO\n  }\n\n  public void meetMonster() {\n    \/\/TODO\n  }\n\n  public int getScore() {\n    return this.score;\n  }\n\n  public State getCurrentState() {\n    return this.currentState;\n  }\n}\n\npublic class ApplicationDemo {\n  public static void main(String[] args) {\n    MarioStateMachine mario = new MarioStateMachine();\n    mario.obtainMushRoom();\n    int score = mario.getScore();\n    State state = mario.getCurrentState();\n    System.out.println(&quot;mario score: &quot; + score + &quot;; state: &quot; + state);\n  }\n}\n<\/code><\/pre><h2>状态机实现方式一：分支逻辑法<\/h2><p>对于如何实现状态机，我总结了三种方式。其中，最简单直接的实现方式是，参照状态转移图，将每一个状态转移，原模原样地直译成代码。这样编写的代码会包含大量的if-else或switch-case分支判断逻辑，甚至是嵌套的分支判断逻辑，所以，我把这种方法暂且命名为分支逻辑法。<\/p><p>按照这个实现思路，我将上面的骨架代码补全一下。补全之后的代码如下所示：<\/p><pre><code>public class MarioStateMachine {\n  private int score;\n  private State currentState;\n\n  public MarioStateMachine() {\n    this.score = 0;\n    this.currentState = State.SMALL;\n  }\n\n  public void obtainMushRoom() {\n    if (currentState.equals(State.SMALL)) {\n      this.currentState = State.SUPER;\n      this.score += 100;\n    }\n  }\n\n  public void obtainCape() {\n    if (currentState.equals(State.SMALL) || currentState.equals(State.SUPER) ) {\n      this.currentState = State.CAPE;\n      this.score += 200;\n    }\n  }\n\n  public void obtainFireFlower() {\n    if (currentState.equals(State.SMALL) || currentState.equals(State.SUPER) ) {\n      this.currentState = State.FIRE;\n      this.score += 300;\n    }\n  }\n\n  public void meetMonster() {\n    if (currentState.equals(State.SUPER)) {\n      this.currentState = State.SMALL;\n      this.score -= 100;\n      return;\n    }\n\n    if (currentState.equals(State.CAPE)) {\n      this.currentState = State.SMALL;\n      this.score -= 200;\n      return;\n    }\n\n    if (currentState.equals(State.FIRE)) {\n      this.currentState = State.SMALL;\n      this.score -= 300;\n      return;\n    }\n  }\n\n  public int getScore() {\n    return this.score;\n  }\n\n  public State getCurrentState() {\n    return this.currentState;\n  }\n}\n<\/code><\/pre><p>对于简单的状态机来说，分支逻辑这种实现方式是可以接受的。但是，对于复杂的状态机来说，这种实现方式极易漏写或者错写某个状态转移。除此之外，代码中充斥着大量的if-else或者switch-case分支判断逻辑，可读性和可维护性都很差。如果哪天修改了状态机中的某个状态转移，我们要在冗长的分支逻辑中找到对应的代码进行修改，很容易改错，引入bug。<\/p><h2>状态机实现方式二：查表法<\/h2><p>实际上，上面这种实现方法有点类似hard code，对于复杂的状态机来说不适用，而状态机的第二种实现方式查表法，就更加合适了。接下来，我们就一块儿来看下，如何利用查表法来补全骨架代码。<\/p><p>实际上，除了用状态转移图来表示之外，状态机还可以用二维表来表示，如下所示。在这个二维表中，第一维表示当前状态，第二维表示事件，值表示当前状态经过事件之后，转移到的新状态及其执行的动作。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/4f\/91\/4f4ea3787bd955918578181e18173491.jpg\" alt=\"\"><\/p><p>相对于分支逻辑的实现方式，查表法的代码实现更加清晰，可读性和可维护性更好。当修改状态机时，我们只需要修改transitionTable和actionTable两个二维数组即可。实际上，如果我们把这两个二维数组存储在配置文件中，当需要修改状态机时，我们甚至可以不修改任何代码，只需要修改配置文件就可以了。具体的代码如下所示：<\/p><pre><code>public enum Event {\n  GOT_MUSHROOM(0),\n  GOT_CAPE(1),\n  GOT_FIRE(2),\n  MET_MONSTER(3);\n\n  private int value;\n\n  private Event(int value) {\n    this.value = value;\n  }\n\n  public int getValue() {\n    return this.value;\n  }\n}\n\npublic class MarioStateMachine {\n  private int score;\n  private State currentState;\n\n  private static final State[][] transitionTable = {\n          {SUPER, CAPE, FIRE, SMALL},\n          {SUPER, CAPE, FIRE, SMALL},\n          {CAPE, CAPE, CAPE, SMALL},\n          {FIRE, FIRE, FIRE, SMALL}\n  };\n\n  private static final int[][] actionTable = {\n          {+100, +200, +300, +0},\n          {+0, +200, +300, -100},\n          {+0, +0, +0, -200},\n          {+0, +0, +0, -300}\n  };\n\n  public MarioStateMachine() {\n    this.score = 0;\n    this.currentState = State.SMALL;\n  }\n\n  public void obtainMushRoom() {\n    executeEvent(Event.GOT_MUSHROOM);\n  }\n\n  public void obtainCape() {\n    executeEvent(Event.GOT_CAPE);\n  }\n\n  public void obtainFireFlower() {\n    executeEvent(Event.GOT_FIRE);\n  }\n\n  public void meetMonster() {\n    executeEvent(Event.MET_MONSTER);\n  }\n\n  private void executeEvent(Event event) {\n    int stateValue = currentState.getValue();\n    int eventValue = event.getValue();\n    this.currentState = transitionTable[stateValue][eventValue];\n    this.score += actionTable[stateValue][eventValue];\n  }\n\n  public int getScore() {\n    return this.score;\n  }\n\n  public State getCurrentState() {\n    return this.currentState;\n  }\n\n}\n<\/code><\/pre><h2>状态机实现方式三：状态模式<\/h2><p>在查表法的代码实现中，事件触发的动作只是简单的积分加减，所以，我们用一个int类型的二维数组actionTable就能表示，二维数组中的值表示积分的加减值。但是，如果要执行的动作并非这么简单，而是一系列复杂的逻辑操作（比如加减积分、写数据库，还有可能发送消息通知等等），我们就没法用如此简单的二维数组来表示了。这也就是说，查表法的实现方式有一定局限性。<\/p><p>虽然分支逻辑的实现方式不存在这个问题，但它又存在前面讲到的其他问题，比如分支判断逻辑较多，导致代码可读性和可维护性不好等。实际上，针对分支逻辑法存在的问题，我们可以使用状态模式来解决。<\/p><p>状态模式通过将事件触发的状态转移和动作执行，拆分到不同的状态类中，来避免分支判断逻辑。我们还是结合代码来理解这句话。<\/p><p>利用状态模式，我们来补全MarioStateMachine类，补全后的代码如下所示。<\/p><p>其中，IMario是状态的接口，定义了所有的事件。SmallMario、SuperMario、CapeMario、FireMario是IMario接口的实现类，分别对应状态机中的4个状态。原来所有的状态转移和动作执行的代码逻辑，都集中在MarioStateMachine类中，现在，这些代码逻辑被分散到了这4个状态类中。<\/p><pre><code>public interface IMario { \/\/所有状态类的接口\n  State getName();\n  \/\/以下是定义的事件\n  void obtainMushRoom();\n  void obtainCape();\n  void obtainFireFlower();\n  void meetMonster();\n}\n\npublic class SmallMario implements IMario {\n  private MarioStateMachine stateMachine;\n\n  public SmallMario(MarioStateMachine stateMachine) {\n    this.stateMachine = stateMachine;\n  }\n\n  @Override\n  public State getName() {\n    return State.SMALL;\n  }\n\n  @Override\n  public void obtainMushRoom() {\n    stateMachine.setCurrentState(new SuperMario(stateMachine));\n    stateMachine.setScore(stateMachine.getScore() + 100);\n  }\n\n  @Override\n  public void obtainCape() {\n    stateMachine.setCurrentState(new CapeMario(stateMachine));\n    stateMachine.setScore(stateMachine.getScore() + 200);\n  }\n\n  @Override\n  public void obtainFireFlower() {\n    stateMachine.setCurrentState(new FireMario(stateMachine));\n    stateMachine.setScore(stateMachine.getScore() + 300);\n  }\n\n  @Override\n  public void meetMonster() {\n    \/\/ do nothing...\n  }\n}\n\npublic class SuperMario implements IMario {\n  private MarioStateMachine stateMachine;\n\n  public SuperMario(MarioStateMachine stateMachine) {\n    this.stateMachine = stateMachine;\n  }\n\n  @Override\n  public State getName() {\n    return State.SUPER;\n  }\n\n  @Override\n  public void obtainMushRoom() {\n    \/\/ do nothing...\n  }\n\n  @Override\n  public void obtainCape() {\n    stateMachine.setCurrentState(new CapeMario(stateMachine));\n    stateMachine.setScore(stateMachine.getScore() + 200);\n  }\n\n  @Override\n  public void obtainFireFlower() {\n    stateMachine.setCurrentState(new FireMario(stateMachine));\n    stateMachine.setScore(stateMachine.getScore() + 300);\n  }\n\n  @Override\n  public void meetMonster() {\n    stateMachine.setCurrentState(new SmallMario(stateMachine));\n    stateMachine.setScore(stateMachine.getScore() - 100);\n  }\n}\n\n\/\/ 省略CapeMario、FireMario类...\n\npublic class MarioStateMachine {\n  private int score;\n  private IMario currentState; \/\/ 不再使用枚举来表示状态\n\n  public MarioStateMachine() {\n    this.score = 0;\n    this.currentState = new SmallMario(this);\n  }\n\n  public void obtainMushRoom() {\n    this.currentState.obtainMushRoom();\n  }\n\n  public void obtainCape() {\n    this.currentState.obtainCape();\n  }\n\n  public void obtainFireFlower() {\n    this.currentState.obtainFireFlower();\n  }\n\n  public void meetMonster() {\n    this.currentState.meetMonster();\n  }\n\n  public int getScore() {\n    return this.score;\n  }\n\n  public State getCurrentState() {\n    return this.currentState.getName();\n  }\n\n  public void setScore(int score) {\n    this.score = score;\n  }\n\n  public void setCurrentState(IMario currentState) {\n    this.currentState = currentState;\n  }\n}\n<\/code><\/pre><p>上面的代码实现不难看懂，我只强调其中的一点，即MarioStateMachine和各个状态类之间是双向依赖关系。MarioStateMachine依赖各个状态类是理所当然的，但是，反过来，各个状态类为什么要依赖MarioStateMachine呢？这是因为，各个状态类需要更新MarioStateMachine中的两个变量，score和currentState。<\/p><p>实际上，上面的代码还可以继续优化，我们可以将状态类设计成单例，毕竟状态类中不包含任何成员变量。但是，当将状态类设计成单例之后，我们就无法通过构造函数来传递MarioStateMachine了，而状态类又要依赖MarioStateMachine，那该如何解决这个问题呢？<\/p><p>实际上，在<a href=\"https:\/\/time.geekbang.org\/column\/article\/194068\">第42讲<\/a>单例模式的讲解中，我们提到过几种解决方法，你可以回过头去再查看一下。在这里，我们可以通过函数参数将MarioStateMachine传递进状态类。根据这个设计思路，我们对上面的代码进行重构。重构之后的代码如下所示：<\/p><pre><code>public interface IMario {\n  State getName();\n  void obtainMushRoom(MarioStateMachine stateMachine);\n  void obtainCape(MarioStateMachine stateMachine);\n  void obtainFireFlower(MarioStateMachine stateMachine);\n  void meetMonster(MarioStateMachine stateMachine);\n}\n\npublic class SmallMario implements IMario {\n  private static final SmallMario instance = new SmallMario();\n  private SmallMario() {}\n  public static SmallMario getInstance() {\n    return instance;\n  }\n\n  @Override\n  public State getName() {\n    return State.SMALL;\n  }\n\n  @Override\n  public void obtainMushRoom(MarioStateMachine stateMachine) {\n    stateMachine.setCurrentState(SuperMario.getInstance());\n    stateMachine.setScore(stateMachine.getScore() + 100);\n  }\n\n  @Override\n  public void obtainCape(MarioStateMachine stateMachine) {\n    stateMachine.setCurrentState(CapeMario.getInstance());\n    stateMachine.setScore(stateMachine.getScore() + 200);\n  }\n\n  @Override\n  public void obtainFireFlower(MarioStateMachine stateMachine) {\n    stateMachine.setCurrentState(FireMario.getInstance());\n    stateMachine.setScore(stateMachine.getScore() + 300);\n  }\n\n  @Override\n  public void meetMonster(MarioStateMachine stateMachine) {\n    \/\/ do nothing...\n  }\n}\n\n\/\/ 省略SuperMario、CapeMario、FireMario类...\n\npublic class MarioStateMachine {\n  private int score;\n  private IMario currentState;\n\n  public MarioStateMachine() {\n    this.score = 0;\n    this.currentState = SmallMario.getInstance();\n  }\n\n  public void obtainMushRoom() {\n    this.currentState.obtainMushRoom(this);\n  }\n\n  public void obtainCape() {\n    this.currentState.obtainCape(this);\n  }\n\n  public void obtainFireFlower() {\n    this.currentState.obtainFireFlower(this);\n  }\n\n  public void meetMonster() {\n    this.currentState.meetMonster(this);\n  }\n\n  public int getScore() {\n    return this.score;\n  }\n\n  public State getCurrentState() {\n    return this.currentState.getName();\n  }\n\n  public void setScore(int score) {\n    this.score = score;\n  }\n\n  public void setCurrentState(IMario currentState) {\n    this.currentState = currentState;\n  }\n}\n<\/code><\/pre><p>实际上，像游戏这种比较复杂的状态机，包含的状态比较多，我优先推荐使用查表法，而状态模式会引入非常多的状态类，会导致代码比较难维护。相反，像电商下单、外卖下单这种类型的状态机，它们的状态并不多，状态转移也比较简单，但事件触发执行的动作包含的业务逻辑可能会比较复杂，所以，更加推荐使用状态模式来实现。<\/p><h2>重点回顾<\/h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。<\/p><p>今天我们讲解了状态模式。虽然网上有各种状态模式的定义，但是你只要记住状态模式是状态机的一种实现方式即可。状态机又叫有限状态机，它有3个部分组成：状态、事件、动作。其中，事件也称为转移条件。事件触发状态的转移及动作的执行。不过，动作不是必须的，也可能只转移状态，不执行任何动作。<\/p><p>针对状态机，今天我们总结了三种实现方式。<\/p><p>第一种实现方式叫分支逻辑法。利用if-else或者switch-case分支逻辑，参照状态转移图，将每一个状态转移原模原样地直译成代码。对于简单的状态机来说，这种实现方式最简单、最直接，是首选。<\/p><p>第二种实现方式叫查表法。对于状态很多、状态转移比较复杂的状态机来说，查表法比较合适。通过二维数组来表示状态转移图，能极大地提高代码的可读性和可维护性。<\/p><p>第三种实现方式叫状态模式。对于状态并不多、状态转移也比较简单，但事件触发执行的动作包含的业务逻辑可能比较复杂的状态机来说，我们首选这种实现方式。<\/p><h2>课堂讨论<\/h2><p>状态模式的代码实现还存在一些问题，比如，状态接口中定义了所有的事件函数，这就导致，即便某个状态类并不需要支持其中的某个或者某些事件，但也要实现所有的事件函数。不仅如此，添加一个事件到状态接口，所有的状态类都要做相应的修改。针对这些问题，你有什么解决方法吗？<\/p><p>欢迎留言和我分享你的想法。如果有收获，欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":101,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/0a\/b6\/0a589efc563395dd1559f4bff118adb6.mp3","id":218375,"had_viewed":false,"article_title":"64 | 状态模式：游戏、工作流引擎中常用的状态机是如何实现的？","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"虽然网上有各种状态模式的定义，但是你只要记住状态模式是状态机的一种实现方式即可。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/aa\/92\/aa36899f38e6f9c529776838755c9692.jpeg","column_sale_type":0,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"10","s":"13","h":"00"},"video_time":"","audio_title":"3.29 王争 音频-64_01","audio_md5":"0a589efc563395dd1559f4bff118adb6","video_size":0,"text_read_percent":0,"comment_count":63,"cid":250,"article_sharetitle":"游戏中常用的状态机是如何实现的？","column_is_onboard":true,"article_cshort":"<p>从今天起，我们开始学习状态模式。在实际的软件开发中，状态模式并不是很常用，但是在能够用到的场景里，它可以发挥很大的作用。从这一点上来看，它有点像我们之前讲到的组合模式。<\/p><p>状态模式一般用来实现状态机，而状态机常用在游戏、工作流引擎等系统开发中。不过，状态机的实现方式有多种，除了状态模式，比较常用的还有分支逻辑法和查表法。今天，我们就详细讲讲这几种实现方式，并且对比一下它们的优劣和应用场景。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>什么是有限状态机？<\/h2><p>有限状态机，英文翻译是Finite State Machine，缩写为FSM，简称为状态机。状态机有3个组成部分：状态（State）、事件（Event）、动作（Action）。其中，事件也称为转移条件（Transition Condition）。事件触发状态的转移及动作的执行。不过，动作不是必须的，也可能只转移状态，不执行任何动作。<\/p><p>对于刚刚给出的状态机的定义，我结合一个具体的例子，来进一步解释一下。<\/p><p>“超级马里奥”游戏不知道你玩过没有？在游戏中，马里奥可以变身为多种形态，比如小马里奥（Small Mario）、超级马里奥（Super Mario）、火焰马里奥（Fire Mario）、斗篷马里奥（Cape Mario）等等。在不同的游戏情节下，各个形态会互相转化，并相应的增减积分。比如，初始形态是小马里奥，吃了蘑菇之后就会变成超级马里奥，并且增加100积分。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1585497600,"score":"91585497600"},"code":0}