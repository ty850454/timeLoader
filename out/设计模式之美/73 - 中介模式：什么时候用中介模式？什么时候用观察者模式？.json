{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":0,"audio_size":7425082,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/11\/a7\/11a6f1f93f165b63b3eca86bb9a60ea7.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/bd\/a2\/bd2fb998b91ffd160ff8a9dd810051a2\/ld\/ld.m3u8","chapter_id":"1289","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":6},"neighbors":{"left":{"article_title":"72 | 解释器模式：如何设计实现一个自定义接口告警规则功能？","id":225904},"right":{"article_title":"74 | 总结回顾23种经典设计模式的原理、背后的思想、应用场景等","id":227452}},"audio_time":"00:07:43","video_height":0,"rate_percent":0,"article_content":"<p>今天，我们来学习23种经典设计模式中的最后一个，中介模式。跟前面刚刚讲过的命令模式、解释器模式类似，中介模式也属于不怎么常用的模式，应用场景比较特殊、有限，但是，跟它俩不同的是，中介模式理解起来并不难，代码实现也非常简单，学习难度要小很多。<\/p><p>如果你对中介模式有所了解，你可能会知道，中介模式跟之前讲过的观察者模式有点相似，所以，今天我们还会详细讨论下这两种模式的区别。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>中介模式的原理和实现<\/h2><p>中介模式的英文翻译是Mediator Design Pattern。在GoF中的《设计模式》一书中，它是这样定义的：<\/p><blockquote>\n<p>Mediator pattern defines a separate (mediator) object that encapsulates the interaction between a set of objects and the objects delegate their interaction to a mediator object instead of interacting with each other directly.<\/p>\n<\/blockquote><p>翻译成中文就是：中介模式定义了一个单独的（中介）对象，来封装一组对象之间的交互。将这组对象之间的交互委派给与中介对象交互，来避免对象之间的直接交互。<\/p><!-- [[[read_end]]] --><p>还记得我们在<a href=\"https:\/\/time.geekbang.org\/column\/article\/187761\">第30节课<\/a>中讲的“如何给代码解耦”吗？其中一个方法就是引入中间层。<\/p><p>实际上，中介模式的设计思想跟中间层很像，通过引入中介这个中间层，将一组对象之间的交互关系（或者说依赖关系）从多对多（网状关系）转换为一对多（星状关系）。原来一个对象要跟n个对象交互，现在只需要跟一个中介对象交互，从而最小化对象之间的交互关系，降低了代码的复杂度，提高了代码的可读性和可维护性。<\/p><p>这里我画了一张对象交互关系的对比图。其中，右边的交互图是利用中介模式对左边交互关系优化之后的结果，从图中我们可以很直观地看出，右边的交互关系更加清晰、简洁。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/43\/9f\/4376d541bf17a029f37aa76009ef3a9f.jpg\" alt=\"\"><\/p><p>提到中介模式，有一个比较经典的例子不得不说，那就是航空管制。<\/p><p>为了让飞机在飞行的时候互不干扰，每架飞机都需要知道其他飞机每时每刻的位置，这就需要时刻跟其他飞机通信。飞机通信形成的通信网络就会无比复杂。这个时候，我们通过引入“塔台”这样一个中介，让每架飞机只跟塔台来通信，发送自己的位置给塔台，由塔台来负责每架飞机的航线调度。这样就大大简化了通信网络。<\/p><p>刚刚举的是生活中的例子，我们再举一个跟编程开发相关的例子。这个例子与UI控件有关，算是中介模式比较经典的应用，很多书籍在讲到中介模式的时候，都会拿它来举例。<\/p><p>假设我们有一个比较复杂的对话框，对话框中有很多控件，比如按钮、文本框、下拉框等。当我们对某个控件进行操作的时候，其他控件会做出相应的反应，比如，我们在下拉框中选择“注册”，注册相关的控件就会显示在对话框中。如果我们在下拉框中选择“登陆”，登陆相关的控件就会显示在对话框中。<\/p><p>按照通常我们习惯的UI界面的开发方式，我们将刚刚的需求用代码实现出来，就是下面这个样子。在这种实现方式中，控件和控件之间互相操作、互相依赖。<\/p><pre><code>public class UIControl {\n  private static final String LOGIN_BTN_ID = &quot;login_btn&quot;;\n  private static final String REG_BTN_ID = &quot;reg_btn&quot;;\n  private static final String USERNAME_INPUT_ID = &quot;username_input&quot;;\n  private static final String PASSWORD_INPUT_ID = &quot;pswd_input&quot;;\n  private static final String REPEATED_PASSWORD_INPUT_ID = &quot;repeated_pswd_input&quot;;\n  private static final String HINT_TEXT_ID = &quot;hint_text&quot;;\n  private static final String SELECTION_ID = &quot;selection&quot;;\n\n  public static void main(String[] args) {\n    Button loginButton = (Button)findViewById(LOGIN_BTN_ID);\n    Button regButton = (Button)findViewById(REG_BTN_ID);\n    Input usernameInput = (Input)findViewById(USERNAME_INPUT_ID);\n    Input passwordInput = (Input)findViewById(PASSWORD_INPUT_ID);\n    Input repeatedPswdInput = (Input)findViewById(REPEATED_PASSWORD_INPUT_ID);\n    Text hintText = (Text)findViewById(HINT_TEXT_ID);\n    Selection selection = (Selection)findViewById(SELECTION_ID);\n\n    loginButton.setOnClickListener(new OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        String username = usernameInput.text();\n        String password = passwordInput.text();\n        \/\/校验数据...\n        \/\/做业务处理...\n      }\n    });\n\n    regButton.setOnClickListener(new OnClickListener() {\n      @Override\n      public void onClick(View v) {\n      \/\/获取usernameInput、passwordInput、repeatedPswdInput数据...\n      \/\/校验数据...\n      \/\/做业务处理...\n      }\n    });\n\n    \/\/...省略selection下拉选择框相关代码....\n  }\n}\n<\/code><\/pre><p>我们再按照中介模式，将上面的代码重新实现一下。在新的代码实现中，各个控件只跟中介对象交互，中介对象负责所有业务逻辑的处理。<\/p><pre><code>public interface Mediator {\n  void handleEvent(Component component, String event);\n}\n\npublic class LandingPageDialog implements Mediator {\n  private Button loginButton;\n  private Button regButton;\n  private Selection selection;\n  private Input usernameInput;\n  private Input passwordInput;\n  private Input repeatedPswdInput;\n  private Text hintText;\n\n  @Override\n  public void handleEvent(Component component, String event) {\n    if (component.equals(loginButton)) {\n      String username = usernameInput.text();\n      String password = passwordInput.text();\n      \/\/校验数据...\n      \/\/做业务处理...\n    } else if (component.equals(regButton)) {\n      \/\/获取usernameInput、passwordInput、repeatedPswdInput数据...\n      \/\/校验数据...\n      \/\/做业务处理...\n    } else if (component.equals(selection)) {\n      String selectedItem = selection.select();\n      if (selectedItem.equals(&quot;login&quot;)) {\n        usernameInput.show();\n        passwordInput.show();\n        repeatedPswdInput.hide();\n        hintText.hide();\n        \/\/...省略其他代码\n      } else if (selectedItem.equals(&quot;register&quot;)) {\n        \/\/....\n      }\n    }\n  }\n}\n\npublic class UIControl {\n  private static final String LOGIN_BTN_ID = &quot;login_btn&quot;;\n  private static final String REG_BTN_ID = &quot;reg_btn&quot;;\n  private static final String USERNAME_INPUT_ID = &quot;username_input&quot;;\n  private static final String PASSWORD_INPUT_ID = &quot;pswd_input&quot;;\n  private static final String REPEATED_PASSWORD_INPUT_ID = &quot;repeated_pswd_input&quot;;\n  private static final String HINT_TEXT_ID = &quot;hint_text&quot;;\n  private static final String SELECTION_ID = &quot;selection&quot;;\n\n  public static void main(String[] args) {\n    Button loginButton = (Button)findViewById(LOGIN_BTN_ID);\n    Button regButton = (Button)findViewById(REG_BTN_ID);\n    Input usernameInput = (Input)findViewById(USERNAME_INPUT_ID);\n    Input passwordInput = (Input)findViewById(PASSWORD_INPUT_ID);\n    Input repeatedPswdInput = (Input)findViewById(REPEATED_PASSWORD_INPUT_ID);\n    Text hintText = (Text)findViewById(HINT_TEXT_ID);\n    Selection selection = (Selection)findViewById(SELECTION_ID);\n\n    Mediator dialog = new LandingPageDialog();\n    dialog.setLoginButton(loginButton);\n    dialog.setRegButton(regButton);\n    dialog.setUsernameInput(usernameInput);\n    dialog.setPasswordInput(passwordInput);\n    dialog.setRepeatedPswdInput(repeatedPswdInput);\n    dialog.setHintText(hintText);\n    dialog.setSelection(selection);\n\n    loginButton.setOnClickListener(new OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        dialog.handleEvent(loginButton, &quot;click&quot;);\n      }\n    });\n\n    regButton.setOnClickListener(new OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        dialog.handleEvent(regButton, &quot;click&quot;);\n      }\n    });\n\n    \/\/....\n  }\n}\n<\/code><\/pre><p>从代码中我们可以看出，原本业务逻辑会分散在各个控件中，现在都集中到了中介类中。实际上，这样做既有好处，也有坏处。好处是简化了控件之间的交互，坏处是中介类有可能会变成大而复杂的“上帝类”（God Class）。所以，在使用中介模式的时候，我们要根据实际的情况，平衡对象之间交互的复杂度和中介类本身的复杂度。<\/p><h2>中介模式 VS 观察者模式<\/h2><p>前面讲观察者模式的时候，我们讲到，观察者模式有多种实现方式。虽然经典的实现方式没法彻底解耦观察者和被观察者，观察者需要注册到被观察者中，被观察者状态更新需要调用观察者的update()方法。但是，在跨进程的实现方式中，我们可以利用消息队列实现彻底解耦，观察者和被观察者都只需要跟消息队列交互，观察者完全不知道被观察者的存在，被观察者也完全不知道观察者的存在。<\/p><p>我们前面提到，中介模式也是为了解耦对象之间的交互，所有的参与者都只与中介进行交互。而观察者模式中的消息队列，就有点类似中介模式中的“中介”，观察者模式的中观察者和被观察者，就有点类似中介模式中的“参与者”。那问题来了：中介模式和观察者模式的区别在哪里呢？什么时候选择使用中介模式？什么时候选择使用观察者模式呢？<\/p><p>在观察者模式中，尽管一个参与者既可以是观察者，同时也可以是被观察者，但是，大部分情况下，交互关系往往都是单向的，一个参与者要么是观察者，要么是被观察者，不会兼具两种身份。也就是说，在观察者模式的应用场景中，参与者之间的交互关系比较有条理。<\/p><p>而中介模式正好相反。只有当参与者之间的交互关系错综复杂，维护成本很高的时候，我们才考虑使用中介模式。毕竟，中介模式的应用会带来一定的副作用，前面也讲到，它有可能会产生大而复杂的上帝类。除此之外，如果一个参与者状态的改变，其他参与者执行的操作有一定先后顺序的要求，这个时候，中介模式就可以利用中介类，通过先后调用不同参与者的方法，来实现顺序的控制，而观察者模式是无法实现这样的顺序要求的。<\/p><h2>重点回顾<\/h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。<\/p><p>中介模式的设计思想跟中间层很像，通过引入中介这个中间层，将一组对象之间的交互关系（或者依赖关系）从多对多（网状关系）转换为一对多（星状关系）。原来一个对象要跟n个对象交互，现在只需要跟一个中介对象交互，从而最小化对象之间的交互关系，降低了代码的复杂度，提高了代码的可读性和可维护性。<\/p><p>观察者模式和中介模式都是为了实现参与者之间的解耦，简化交互关系。两者的不同在于应用场景上。在观察者模式的应用场景中，参与者之间的交互比较有条理，一般都是单向的，一个参与者只有一个身份，要么是观察者，要么是被观察者。而在中介模式的应用场景中，参与者之间的交互关系错综复杂，既可以是消息的发送者、也可以同时是消息的接收者。<\/p><h2>课堂讨论<\/h2><p>在讲观察者模式的时候，我们有讲到EventBus框架。当时我们认为它是观察者模式的实现框架。EventBus作为一个事件处理的中心，事件的派送、订阅都通过这个中心来完成，那是不是更像中介模式的实现框架呢？<\/p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":10,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/bd\/a2\/bd2fb998b91ffd160ff8a9dd810051a2.mp3","id":226710,"had_viewed":false,"article_title":"73 | 中介模式：什么时候用中介模式？什么时候用观察者模式？","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"如果你对中介模式有所了解，你可能会知道，它跟观察者模式有点相似，所以，今天我们会详细讲一下这两种模式的区别。","article_sharetitle":"中介模式和观察者模式有何区别？","column_sale_type":0,"article_features":0,"video_time":"","column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"07","s":"43","h":"00"},"article_could_preview":false,"audio_title":"4.19 王争 音频-73_01","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/f6\/ce\/f604a373342e9b195e21d9b6feb372ce.jpeg","audio_md5":"bd2fb998b91ffd160ff8a9dd810051a2","text_read_percent":0,"comment_count":27,"cid":250,"video_size":0,"column_is_onboard":true,"article_cshort":"<p>今天，我们来学习23种经典设计模式中的最后一个，中介模式。跟前面刚刚讲过的命令模式、解释器模式类似，中介模式也属于不怎么常用的模式，应用场景比较特殊、有限，但是，跟它俩不同的是，中介模式理解起来并不难，代码实现也非常简单，学习难度要小很多。<\/p><p>如果你对中介模式有所了解，你可能会知道，中介模式跟之前讲过的观察者模式有点相似，所以，今天我们还会详细讨论下这两种模式的区别。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>中介模式的原理和实现<\/h2><p>中介模式的英文翻译是Mediator Design Pattern。在GoF中的《设计模式》一书中，它是这样定义的：<\/p><blockquote>\n<p>Mediator pattern defines a separate (mediator) object that encapsulates the interaction between a set of objects and the objects delegate their interaction to a mediator object instead of interacting with each other directly.<\/p>\n<\/blockquote><p>翻译成中文就是：中介模式定义了一个单独的（中介）对象，来封装一组对象之间的交互。将这组对象之间的交互委派给与中介对象交互，来避免对象之间的直接交互。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1587312000,"score":"91587312000"},"code":0}