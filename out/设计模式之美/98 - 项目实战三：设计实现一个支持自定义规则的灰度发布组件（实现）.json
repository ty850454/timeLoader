{"error":[],"extra":[],"data":{"video_id":"","sku":"100039001","video_cover":"","author_name":"王争","text_read_version":0,"audio_size":8364538,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/89\/d0\/89cfb4909c105986babb71b8f03f86d0.jpg","product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/34\/82\/3428e6f0005a899ae9f3479e75c1c782\/ld\/ld.m3u8","chapter_id":"1446","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"like":{"had_done":false,"count":5},"neighbors":{"left":{"article_title":"97  | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（设计）","id":248714},"right":{"article_title":"99 | 总结回顾：在实际软件开发中常用的设计思想、原则和模式","id":250942}},"audio_time":"00:08:42","video_height":0,"rate_percent":0,"article_content":"<p>上两节课，我们讲解了灰度组件的需求和设计思路。不管是之前讲过的限流、幂等框架，还是现在正在讲的灰度组件，这些框架、组件、类库的功能性需求都不复杂，相反，非功能性需求是开发的重点、难点。<\/p><p>今天，我们按照上节课给出的灰度组件的设计思路，讲解如何进行编码实现。不过今天对实现的讲解，跟前面两个实战项目有所不同。在前面两个项目中，我都是手把手地从最基础的MVP代码讲起，然后讲解如何review代码发现问题、重构代码解决问题，最终得到一份还算高质量的代码。考虑到已经有前面两个项目的学习和锻炼了，你应该对开发套路、思考路径很熟悉了，所以，今天我们换个讲法，就不从最基础的讲起了，而是重点讲解实现思路。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>灰度组件功能需求整理<\/h2><p>针对上两节课给出的开发需求和设计思路，我们还是按照老套路，从中剥离出V1版本要实现的内容。为了方便我讲解和你查看，我把灰度组件的开发需求和设计思路，重新整理罗列了一下，放到了这里。<\/p><h3>1.灰度规则的格式和存储方式<\/h3><p>我们希望支持不同格式（JSON、YAML、XML等）、不同存储方式（本地配置文件、Redis、Zookeeper、或者自研配置中心等）的灰度规则配置方式。实际上，这一点跟之前的限流框架中限流规则的格式和存储方式完全一致，代码实现也是相同的，所以在接下来的讲解中，就不重复啰嗦了，你可以回过头去看下<a href=\"https:\/\/time.geekbang.org\/column\/article\/243961\">第92讲<\/a>。<\/p><!-- [[[read_end]]] --><h3>2.灰度规则的语法格式<\/h3><p>我们支持三种灰度规则语法格式：具体值（比如893）、区间值（比如1020-1120）、比例值（比如%30）。除此之外，对于更加复杂的灰度规则，比如只对30天内购买过某某商品并且退货次数少于10次的用户进行灰度，我们通过编程的方式来实现。<\/p><h3>3.灰度规则的内存组织方式<\/h3><p>类似于限流框架中的限流规则，我们需要把灰度规则组织成支持快速查找的数据结构，能够快速判定某个灰度对象（darkTarget，比如用户ID），是否落在灰度规则设定的范围内。<\/p><h3>4.灰度规则热更新<\/h3><p>修改了灰度规则之后，我们希望不重新部署和重启系统，新的灰度规则就能生效，所以，我们需要支持灰度规则热更新。<\/p><p>在V1版本中，对于第一点灰度规则的格式和存储方式，我们只支持YAML格式本地文件的配置存储方式。对于剩下的三点，我们都要进行实现。考虑到V1版本要实现的内容比较多，我们分两步来实现代码，第一步先将大的流程、框架搭建好，第二步再进一步添加、丰富、优化功能。<\/p><h2>实现灰度组件基本功能<\/h2><p>在第一步中，我们先实现基于YAML格式的本地文件的灰度规则配置方式，以及灰度规则热更新，并且只支持三种基本的灰度规则语法格式。基于编程实现灰度规则的方式，我们留在第二步实现。<\/p><p>我们先把这个基本功能的开发需求，用代码实现出来。它的目录结构及其Demo示例如下所示。代码非常简单，只包含4个类。接下来，我们针对每个类再详细讲解一下。<\/p><pre><code>\/\/ 代码目录结构\ncom.xzg.darklaunch\n  --DarkLaunch(框架的最顶层入口类)\n  --DarkFeature(每个feature的灰度规则)\n  --DarkRule(灰度规则)\n  --DarkRuleConfig(用来映射配置到内存中)\n\n\/\/ Demo示例\npublic class DarkDemo {\n  public static void main(String[] args) {\n    DarkLaunch darkLaunch = new DarkLaunch();\n    DarkFeature darkFeature = darkLaunch.getDarkFeature(&quot;call_newapi_getUserById&quot;);\n    System.out.println(darkFeature.enabled());\n    System.out.println(darkFeature.dark(893));\n  }\n}\n\n\/\/ 灰度规则配置(dark-rule.yaml)放置在classpath路径下\nfeatures:\n- key: call_newapi_getUserById\n  enabled: true\n  rule: {893,342,1020-1120,%30}\n- key: call_newapi_registerUser\n  enabled: true\n  rule: {1391198723, %10}\n- key: newalgo_loan\n  enabled: true\n  rule: {0-1000}\n<\/code><\/pre><p>从Demo代码中，我们可以看出，对于业务系统来说，灰度组件的两个直接使用的类是DarkLaunch类和DarkFeature类。<\/p><p><strong>我们先来看DarkLaunch类。<\/strong>这个类是灰度组件的最顶层入口类。它用来组装其他类对象，串联整个操作流程，提供外部调用的接口。<\/p><p>DarkLaunch类先读取灰度规则配置文件，映射为内存中的Java对象（DarkRuleConfig），然后再将这个中间结构，构建成一个支持快速查询的数据结构（DarkRule）。除此之外，它还负责定期更新灰度规则，也就是前面提到的灰度规则热更新。<\/p><p>为了避免更新规则和查询规则的并发执行冲突，在更新灰度规则的时候，我们并非直接操作老的DarkRule，而是先创建一个新的DarkRule，然后等新的DarkRule都构建好之后，再“瞬间”赋值给老的DarkRule。你可以结合着下面的代码一块看下。<\/p><pre><code>public class DarkLaunch {\n  private static final Logger log = LoggerFactory.getLogger(DarkLaunch.class);\n  private static final int DEFAULT_RULE_UPDATE_TIME_INTERVAL = 60; \/\/ in seconds\n  private DarkRule rule;\n  private ScheduledExecutorService executor;\n\n  public DarkLaunch(int ruleUpdateTimeInterval) {\n    loadRule();\n    this.executor = Executors.newSingleThreadScheduledExecutor();\n    this.executor.scheduleAtFixedRate(new Runnable() {\n      @Override\n      public void run() {\n        loadRule();\n      }\n    }, ruleUpdateTimeInterval, ruleUpdateTimeInterval, TimeUnit.SECONDS);\n  }\n\n  public DarkLaunch() {\n    this(DEFAULT_RULE_UPDATE_TIME_INTERVAL);\n  }\n\n  private void loadRule() {\n    \/\/ 将灰度规则配置文件dark-rule.yaml中的内容读取DarkRuleConfig中\n    InputStream in = null;\n    DarkRuleConfig ruleConfig = null;\n    try {\n      in = this.getClass().getResourceAsStream(&quot;\/dark-rule.yaml&quot;);\n      if (in != null) {\n        Yaml yaml = new Yaml();\n        ruleConfig = yaml.loadAs(in, DarkRuleConfig.class);\n      }\n    } finally {\n      if (in != null) {\n        try {\n          in.close();\n        } catch (IOException e) {\n          log.error(&quot;close file error:{}&quot;, e);\n        }\n      }\n    }\n\n    if (ruleConfig == null) {\n      throw new RuntimeException(&quot;Can not load dark rule.&quot;);\n    }\n    \/\/ 更新规则并非直接在this.rule上进行，\n    \/\/ 而是通过创建一个新的DarkRule，然后赋值给this.rule，\n    \/\/ 来避免更新规则和规则查询的并发冲突问题\n    DarkRule newRule = new DarkRule(ruleConfig);\n    this.rule = newRule;\n  }\n\n  public DarkFeature getDarkFeature(String featureKey) {\n    DarkFeature darkFeature = this.rule.getDarkFeature(featureKey);\n    return darkFeature;\n  }\n}\n<\/code><\/pre><p><strong>我们再来看下DarkRuleConfig类。<\/strong>这个类功能非常简单，只是用来将灰度规则映射到内存中。具体的代码如下所示：<\/p><pre><code>public class DarkRuleConfig {\n  private List&lt;DarkFeatureConfig&gt; features;\n\n  public List&lt;DarkFeatureConfig&gt; getFeatures() {\n    return this.features;\n  }\n\n  public void setFeatures(List&lt;DarkFeatureConfig&gt; features) {\n    this.features = features;\n  }\n\n  public static class DarkFeatureConfig {\n    private String key;\n    private boolean enabled;\n    private String rule;\n    \/\/ 省略getter、setter方法\n  }\n}\n<\/code><\/pre><p>从代码中，我们可以看出来，DarkRuleConfig类嵌套了一个内部类DarkFeatureConfig。这两个类跟配置文件的两层嵌套结构完全对应。我把对应关系标注在了下面的示例中，你可以对照着代码看下。<\/p><pre><code>&lt;!--对应DarkRuleConfig--&gt;\nfeatures:                       \n- key: call_newapi_getUserById  &lt;!--对应DarkFeatureConfig--&gt;\n  enabled: true\n  rule: {893,342,1020-1120,%30}\n- key: call_newapi_registerUser &lt;!--对应DarkFeatureConfig--&gt;\n  enabled: true\n  rule: {1391198723, %10}\n- key: newalgo_loan             &lt;!--对应DarkFeatureConfig--&gt;\n  enabled: true\n  rule: {0-1000}\n<\/code><\/pre><p><strong>我们再来看下DarkRule。<\/strong>DarkRule包含所有要灰度的业务功能的灰度规则。它用来支持根据业务功能标识（feature key），快速查询灰度规则（DarkFeature）。代码也比较简单，具体如下所示：<\/p><pre><code>public class DarkRule {\n  private Map&lt;String, DarkFeature&gt; darkFeatures = new HashMap&lt;&gt;();\n\n  public DarkRule(DarkRuleConfig darkRuleConfig) {\n    List&lt;DarkRuleConfig.DarkFeatureConfig&gt; darkFeatureConfigs = darkRuleConfig.getFeatures();\n    for (DarkRuleConfig.DarkFeatureConfig darkFeatureConfig : darkFeatureConfigs) {\n      darkFeatures.put(darkFeatureConfig.getKey(), new DarkFeature(darkFeatureConfig));\n    }\n  }\n\n  public DarkFeature getDarkFeature(String featureKey) {\n    return darkFeatures.get(featureKey);\n  }\n}\n<\/code><\/pre><p><strong>我们最后来看下DarkFeature类。<\/strong>DarkFeature类表示每个要灰度的业务功能的灰度规则。DarkFeature将配置文件中灰度规则，解析成一定的结构（比如RangeSet），方便快速判定某个灰度对象是否落在灰度规则范围内。具体的代码如下所示：<\/p><pre><code>public class DarkFeature {\n  private String key;\n  private boolean enabled;\n  private int percentage;\n  private RangeSet&lt;Long&gt; rangeSet = TreeRangeSet.create();\n\n  public DarkFeature(DarkRuleConfig.DarkFeatureConfig darkFeatureConfig) {\n    this.key = darkFeatureConfig.getKey();\n    this.enabled = darkFeatureConfig.getEnabled();\n    String darkRule = darkFeatureConfig.getRule().trim();\n    parseDarkRule(darkRule);\n  }\n\n  @VisibleForTesting\n  protected void parseDarkRule(String darkRule) {\n    if (!darkRule.startsWith(&quot;{&quot;) || !darkRule.endsWith(&quot;}&quot;)) {\n      throw new RuntimeException(&quot;Failed to parse dark rule: &quot; + darkRule);\n    }\n\n    String[] rules = darkRule.substring(1, darkRule.length() - 1).split(&quot;,&quot;);\n    this.rangeSet.clear();\n    this.percentage = 0;\n    for (String rule : rules) {\n      rule = rule.trim();\n      if (StringUtils.isEmpty(rule)) {\n        continue;\n      }\n\n      if (rule.startsWith(&quot;%&quot;)) {\n        int newPercentage = Integer.parseInt(rule.substring(1));\n        if (newPercentage &gt; this.percentage) {\n          this.percentage = newPercentage;\n        }\n      } else if (rule.contains(&quot;-&quot;)) {\n        String[] parts = rule.split(&quot;-&quot;);\n        if (parts.length != 2) {\n          throw new RuntimeException(&quot;Failed to parse dark rule: &quot; + darkRule);\n        }\n        long start = Long.parseLong(parts[0]);\n        long end = Long.parseLong(parts[1]);\n        if (start &gt; end) {\n          throw new RuntimeException(&quot;Failed to parse dark rule: &quot; + darkRule);\n        }\n        this.rangeSet.add(Range.closed(start, end));\n      } else {\n        long val = Long.parseLong(rule);\n        this.rangeSet.add(Range.closed(val, val));\n      }\n    }\n  }\n\n  public boolean enabled() {\n    return this.enabled;\n  }\n\n  public boolean dark(long darkTarget) {\n    boolean selected = this.rangeSet.contains(darkTarget);\n    if (selected) {\n      return true;\n    }\n\n    long reminder = darkTarget % 100;\n    if (reminder &gt;= 0 &amp;&amp; reminder &lt; this.percentage) {\n      return true;\n    }\n\n    return false;\n  }\n\n  public boolean dark(String darkTarget) {\n    long target = Long.parseLong(darkTarget);\n    return dark(target);\n  }\n}\n<\/code><\/pre><h2>添加、优化灰度组件功能<\/h2><p>在第一步中，我们完成了灰度组件的基本功能。在第二步中，我们再实现基于编程的灰度规则配置方式，用来支持更加复杂、更加灵活的灰度规则。<\/p><p>我们需要对于第一步实现的代码，进行一些改造。改造之后的代码目录结构如下所示。其中，DarkFeature、DarkRuleConfig的基本代码不变，新增了IDarkFeature接口，DarkLaunch、DarkRule的代码有所改动，用来支持编程实现灰度规则。<\/p><pre><code>\/\/ 第一步的代码目录结构\ncom.xzg.darklaunch\n  --DarkLaunch(框架的最顶层入口类)\n  --DarkFeature(每个feature的灰度规则)\n  --DarkRule(灰度规则)\n  --DarkRuleConfig(用来映射配置到内存中)\n\n\/\/ 第二步的代码目录结构\ncom.xzg.darklaunch\n  --DarkLaunch(框架的最顶层入口类，代码有改动)\n  --IDarkFeature(抽象接口)\n  --DarkFeature(实现IDarkFeature接口，基于配置文件的灰度规则，代码不变)\n  --DarkRule(灰度规则，代码有改动)\n  --DarkRuleConfig(用来映射配置到内存中，代码不变)\n<\/code><\/pre><p>我们先来看下IDarkFeature接口，它用来抽象从配置文件中得到的灰度规则，以及编程实现的灰度规则。具体代码如下所示：<\/p><pre><code>public interface IDarkFeature {\n  boolean enabled();\n  boolean dark(long darkTarget);\n  boolean dark(String darkTarget);\n}\n<\/code><\/pre><p>基于这个抽象接口，业务系统可以自己编程实现复杂的灰度规则，然后添加到DarkRule中。为了避免配置文件中的灰度规则热更新时，覆盖掉编程实现的灰度规则，在DarkRule中，我们对从配置文件中加载的灰度规则和编程实现的灰度规则分开存储。按照这个设计思路，我们对DarkRule类进行重构。重构之后的代码如下所示：<\/p><pre><code>public class DarkRule {\n  \/\/ 从配置文件中加载的灰度规则\n  private Map&lt;String, IDarkFeature&gt; darkFeatures = new HashMap&lt;&gt;();\n  \/\/ 编程实现的灰度规则\n  private ConcurrentHashMap&lt;String, IDarkFeature&gt; programmedDarkFeatures = new ConcurrentHashMap&lt;&gt;();\n\n  public void addProgrammedDarkFeature(String featureKey, IDarkFeature darkFeature) {\n    programmedDarkFeatures.put(featureKey, darkFeature);\n  }\n\n  public void setDarkFeatures(Map&lt;String, IDarkFeature&gt; newDarkFeatures) {\n    this.darkFeatures = newDarkFeatures;\n  }\n\n  public IDarkFeature getDarkFeature(String featureKey) {\n    IDarkFeature darkFeature = programmedDarkFeatures.get(featureKey);\n    if (darkFeature != null) {\n      return darkFeature;\n    }\n    return darkFeatures.get(featureKey);\n  }\n}\n<\/code><\/pre><p>因为DarkRule代码有所修改，对应地，DarkLaunch的代码也需要做少许改动，主要有一处修改和一处新增代码，具体如下所示，我在代码中都做了注释，就不再重复解释了。<\/p><pre><code>public class DarkLaunch {\n  private static final Logger log = LoggerFactory.getLogger(DarkLaunch.class);\n  private static final int DEFAULT_RULE_UPDATE_TIME_INTERVAL = 60; \/\/ in seconds\n  private DarkRule rule = new DarkRule();\n  private ScheduledExecutorService executor;\n\n  public DarkLaunch(int ruleUpdateTimeInterval) {\n    loadRule();\n    this.executor = Executors.newSingleThreadScheduledExecutor();\n    this.executor.scheduleAtFixedRate(new Runnable() {\n      @Override\n      public void run() {\n        loadRule();\n      }\n    }, ruleUpdateTimeInterval, ruleUpdateTimeInterval, TimeUnit.SECONDS);\n  }\n\n  public DarkLaunch() {\n    this(DEFAULT_RULE_UPDATE_TIME_INTERVAL);\n  }\n\n  private void loadRule() {\n    InputStream in = null;\n    DarkRuleConfig ruleConfig = null;\n    try {\n      in = this.getClass().getResourceAsStream(&quot;\/dark-rule.yaml&quot;);\n      if (in != null) {\n        Yaml yaml = new Yaml();\n        ruleConfig = yaml.loadAs(in, DarkRuleConfig.class);\n      }\n    } finally {\n      if (in != null) {\n        try {\n          in.close();\n        } catch (IOException e) {\n          log.error(&quot;close file error:{}&quot;, e);\n        }\n      }\n    }\n\n    if (ruleConfig == null) {\n      throw new RuntimeException(&quot;Can not load dark rule.&quot;);\n    }\n    \n    \/\/ 修改：单独更新从配置文件中得到的灰度规则，不覆盖编程实现的灰度规则\n    Map&lt;String, IDarkFeature&gt; darkFeatures = new HashMap&lt;&gt;();\n    List&lt;DarkRuleConfig.DarkFeatureConfig&gt; darkFeatureConfigs = ruleConfig.getFeatures();\n    for (DarkRuleConfig.DarkFeatureConfig darkFeatureConfig : darkFeatureConfigs) {\n      darkFeatures.put(darkFeatureConfig.getKey(), new DarkFeature(darkFeatureConfig));\n    }\n    this.rule.setDarkFeatures(darkFeatures);\n  }\n\n  \/\/ 新增：添加编程实现的灰度规则的接口\n  public void addProgrammedDarkFeature(String featureKey, IDarkFeature darkFeature) {\n    this.rule.addProgrammedDarkFeature(featureKey, darkFeature);\n  }\n\n  public IDarkFeature getDarkFeature(String featureKey) {\n    IDarkFeature darkFeature = this.rule.getDarkFeature(featureKey);\n    return darkFeature;\n  }\n}\n<\/code><\/pre><p>灰度组件的代码实现就讲完了。我们再通过一个Demo来看下，目前实现的灰度组件该如何使用。结合着Demo，再去理解上面的代码，会更容易些。Demo代码如下所示：<\/p><pre><code>\/\/ 灰度规则配置(dark-rule.yaml)，放到classpath路径下\nfeatures:\n- key: call_newapi_getUserById\n  enabled: true\n  rule: {893,342,1020-1120,%30}\n- key: call_newapi_registerUser\n  enabled: true\n  rule: {1391198723, %10}\n- key: newalgo_loan\n  enabled: true\n  rule: {0-100}\n  \n\/\/ 编程实现的灰度规则\npublic class UserPromotionDarkRule implements IDarkFeature {\n  @Override\n  public boolean enabled() {\n    return true;\n  }\n\n  @Override\n  public boolean dark(long darkTarget) {\n    \/\/ 灰度规则自己想怎么写就怎么写\n    return false;\n  }\n\n  @Override\n  public boolean dark(String darkTarget) {\n    \/\/ 灰度规则自己想怎么写就怎么写\n    return false;\n  }\n}\n\n\/\/ Demo\npublic class Demo {\n  public static void main(String[] args) {\n    DarkLaunch darkLaunch = new DarkLaunch(); \/\/ 默认加载classpath下dark-rule.yaml文件中的灰度规则\n    darkLaunch.addProgrammedDarkFeature(&quot;user_promotion&quot;, new UserPromotionDarkRule()); \/\/ 添加编程实现的灰度规则\n    IDarkFeature darkFeature = darkLaunch.getDarkFeature(&quot;user_promotion&quot;);\n    System.out.println(darkFeature.enabled());\n    System.out.println(darkFeature.dark(893));\n  }\n}\n<\/code><\/pre><h2>重点回顾<\/h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。<\/p><p>到今天为止，项目实战环节就彻底结束了。在这一部分中，我们通过限流、幂等、灰度这三个实战项目，带你从需求分析、系统设计、代码实现这三个环节，学习了如何进行功能性、非功能性需求分析，如何通过合理的设计，完成功能性需求的同时，满足非功能性需求，以及如何编写高质量的代码实现。<\/p><p>实际上，项目本身的分析、设计、实现并不重要，不必对细节过于纠结。我希望通过这三个例子，分享我的思考路径、开发套路，让你借鉴并举一反三地应用到你平时的项目开发中。我觉得这才是最有价值的，才是你学习的重点。<\/p><p>如果你学完这一部分之后，对于项目中的一些通用的功能，能够开始下意识地主动思考代码复用的问题，考虑如何抽象成框架、类库、组件，并且对于如何开发，也不再觉得无从下手，而是觉得有章可循，那我觉得你就学到了这一部分的精髓。<\/p><h2>课堂讨论<\/h2><p>在DarkFeature类中，灰度规则的解析代码设计的不够优雅，你觉得问题在哪里呢？又该如何重构呢？<\/p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。<\/p>","footer_cover_data":{"img_url":"https:\/\/static001.geekbang.org\/resource\/image\/26\/2f\/262c882b3159d5a512c14d746e9be32f.png","link_url":"https:\/\/coding.geekbang.org\/activity\/algorithm-challenge?utm_source=geektime&utm_medium=article&utm_campaign=liebianactivity&utm_content=articlebottom&utm_term=geektime-article-liebianactivity-articlebottom","mp_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{"2":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"1":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0},"3":{"cur_version":0,"max_rate":0,"cur_rate":0,"is_finished":false,"total_rate":0,"learned_seconds":0}},"product_id":100039001,"like_count":23,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/34\/82\/3428e6f0005a899ae9f3479e75c1c782.mp3","id":249369,"had_viewed":false,"article_title":"98 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（实现）","column_bgcolor":"#F6F7FB","share":{"content":"前Google工程师手把手教你写高质量代码","title":"王争 · 设计模式之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/bb\/16\/bbae9826fe7380857ad8edae52659a16.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg"},"is_video_preview":false,"article_summary":"今天我们换个讲法，不从最基础的讲起了，而是重点讲解实现思路。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/49\/eb\/49a1e3bf543324a1a2238553847de1eb.jpeg","column_sale_type":0,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/37\/47\/37db2297526f625866b66cee9aea0547.jpg","column_id":250,"audio_time_arr":{"m":"08","s":"42","h":"00"},"video_time":"","audio_title":"6.16 王争 音频-98","audio_md5":"3428e6f0005a899ae9f3479e75c1c782","video_size":0,"text_read_percent":0,"comment_count":19,"cid":250,"article_sharetitle":"实现篇：设计实现一个支持自定义规则的灰度发布组件","column_is_onboard":true,"article_cshort":"<p>上两节课，我们讲解了灰度组件的需求和设计思路。不管是之前讲过的限流、幂等框架，还是现在正在讲的灰度组件，这些框架、组件、类库的功能性需求都不复杂，相反，非功能性需求是开发的重点、难点。<\/p><p>今天，我们按照上节课给出的灰度组件的设计思路，讲解如何进行编码实现。不过今天对实现的讲解，跟前面两个实战项目有所不同。在前面两个项目中，我都是手把手地从最基础的MVP代码讲起，然后讲解如何review代码发现问题、重构代码解决问题，最终得到一份还算高质量的代码。考虑到已经有前面两个项目的学习和锻炼了，你应该对开发套路、思考路径很熟悉了，所以，今天我们换个讲法，就不从最基础的讲起了，而是重点讲解实现思路。<\/p><p>话不多说，让我们正式开始今天的学习吧！<\/p><h2>灰度组件功能需求整理<\/h2><p>针对上两节课给出的开发需求和设计思路，我们还是按照老套路，从中剥离出V1版本要实现的内容。为了方便我讲解和你查看，我把灰度组件的开发需求和设计思路，重新整理罗列了一下，放到了这里。<\/p><h3>1.灰度规则的格式和存储方式<\/h3><p>我们希望支持不同格式（JSON、YAML、XML等）、不同存储方式（本地配置文件、Redis、Zookeeper、或者自研配置中心等）的灰度规则配置方式。实际上，这一点跟之前的限流框架中限流规则的格式和存储方式完全一致，代码实现也是相同的，所以在接下来的讲解中，就不重复啰嗦了，你可以回过头去看下<a href=\"https:\/\/time.geekbang.org\/column\/article\/243961\">第92讲<\/a>。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1592323200,"score":"121592323200"},"code":0}